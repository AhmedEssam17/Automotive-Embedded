
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000058e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000120f  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a0  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e9  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  00002da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d0  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b5 02 	call	0x56a	; 0x56a <main>
  7a:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPortDir>:
		case DIO_PORTC:
		*value = PINA;
		break;
		
		case DIO_PORTD:
		*value = PINA;
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	41 f0       	breq	.+16     	; 0x96 <DIO_SetPortDir+0x14>
  86:	28 f0       	brcs	.+10     	; 0x92 <DIO_SetPortDir+0x10>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_SetPortDir+0x18>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	39 f0       	breq	.+14     	; 0x9e <DIO_SetPortDir+0x1c>
  90:	08 95       	ret
  92:	6a bb       	out	0x1a, r22	; 26
  94:	08 95       	ret
  96:	67 bb       	out	0x17, r22	; 23
  98:	08 95       	ret
  9a:	64 bb       	out	0x14, r22	; 20
  9c:	08 95       	ret
  9e:	61 bb       	out	0x11, r22	; 17
  a0:	08 95       	ret

000000a2 <DIO_SetPinDir>:
  a2:	44 23       	and	r20, r20
  a4:	a1 f1       	breq	.+104    	; 0x10e <DIO_SetPinDir+0x6c>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	89 f0       	breq	.+34     	; 0xcc <DIO_SetPinDir+0x2a>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <DIO_SetPinDir+0x14>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	c9 f0       	breq	.+50     	; 0xe2 <DIO_SetPinDir+0x40>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	11 f1       	breq	.+68     	; 0xf8 <DIO_SetPinDir+0x56>
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPinDir+0x20>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPinDir+0x1c>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDir+0x36>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPinDir+0x32>
  dc:	82 2b       	or	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
  e2:	24 b3       	in	r18, 0x14	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPinDir+0x4c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPinDir+0x48>
  f2:	82 2b       	or	r24, r18
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	08 95       	ret
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDir+0x62>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDir+0x5e>
 108:	82 2b       	or	r24, r18
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	08 95       	ret
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <DIO_SetPinDir+0x94>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_SetPinDir+0x7c>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <DIO_SetPinDir+0xac>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <DIO_SetPinDir+0xc4>
 11c:	08 95       	ret
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0x88>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0x84>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xa0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0x9c>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDir+0xb8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDir+0xb4>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDir+0xd0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDir+0xcc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_SetPinVal>:
 17e:	44 23       	and	r20, r20
 180:	a1 f1       	breq	.+104    	; 0x1ea <DIO_SetPinVal+0x6c>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	89 f0       	breq	.+34     	; 0x1a8 <DIO_SetPinVal+0x2a>
 186:	28 f0       	brcs	.+10     	; 0x192 <DIO_SetPinVal+0x14>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	c9 f0       	breq	.+50     	; 0x1be <DIO_SetPinVal+0x40>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	11 f1       	breq	.+68     	; 0x1d4 <DIO_SetPinVal+0x56>
 190:	08 95       	ret
 192:	2b b3       	in	r18, 0x1b	; 27
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_SetPinVal+0x20>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_SetPinVal+0x1c>
 1a2:	82 2b       	or	r24, r18
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	08 95       	ret
 1a8:	28 b3       	in	r18, 0x18	; 24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinVal+0x36>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinVal+0x32>
 1b8:	82 2b       	or	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPinVal+0x4c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPinVal+0x48>
 1ce:	82 2b       	or	r24, r18
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	08 95       	ret
 1d4:	22 b3       	in	r18, 0x12	; 18
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SetPinVal+0x62>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SetPinVal+0x5e>
 1e4:	82 2b       	or	r24, r18
 1e6:	82 bb       	out	0x12, r24	; 18
 1e8:	08 95       	ret
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	91 f0       	breq	.+36     	; 0x212 <DIO_SetPinVal+0x94>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <DIO_SetPinVal+0x7c>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	d9 f0       	breq	.+54     	; 0x22a <DIO_SetPinVal+0xac>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	29 f1       	breq	.+74     	; 0x242 <DIO_SetPinVal+0xc4>
 1f8:	08 95       	ret
 1fa:	2b b3       	in	r18, 0x1b	; 27
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinVal+0x88>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinVal+0x84>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPinVal+0xa0>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPinVal+0x9c>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPinVal+0xb8>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPinVal+0xb4>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinVal+0xd0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinVal+0xcc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_ReadPin>:
}

uint8_t DIO_ReadPin(uint8_t PORTx, uint8_t PINx){
	uint8_t value = 0;
	
	switch(PORTx){
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	79 f0       	breq	.+30     	; 0x27c <DIO_ReadPin+0x22>
 25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_ReadPin+0x10>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	a9 f0       	breq	.+42     	; 0x28e <DIO_ReadPin+0x34>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	e1 f0       	breq	.+56     	; 0x2a0 <DIO_ReadPin+0x46>
 268:	24 c0       	rjmp	.+72     	; 0x2b2 <DIO_ReadPin+0x58>
		case DIO_PORTA:
		value = READ_BIT(PORTA, PINx);
 26a:	8b b3       	in	r24, 0x1b	; 27
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_ReadPin+0x1a>
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_ReadPin+0x16>
 278:	81 70       	andi	r24, 0x01	; 1
		break;
 27a:	08 95       	ret
		
		case DIO_PORTB:
		value = READ_BIT(PORTB, PINx);
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_ReadPin+0x2c>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_ReadPin+0x28>
 28a:	81 70       	andi	r24, 0x01	; 1
		break;
 28c:	08 95       	ret
		
		case DIO_PORTC:
		value = READ_BIT(PORTC, PINx);
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_ReadPin+0x3e>
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_ReadPin+0x3a>
 29c:	81 70       	andi	r24, 0x01	; 1
		break;
 29e:	08 95       	ret
		
		case DIO_PORTD:
		value = READ_BIT(PORTD, PINx);
 2a0:	82 b3       	in	r24, 0x12	; 18
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_ReadPin+0x50>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_ReadPin+0x4c>
 2ae:	81 70       	andi	r24, 0x01	; 1
		break;
 2b0:	08 95       	ret
		break;
	}
}

uint8_t DIO_ReadPin(uint8_t PORTx, uint8_t PINx){
	uint8_t value = 0;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
	}
	
	return value;
}
 2b4:	08 95       	ret

000002b6 <Keypad_init>:
									{'5','6','7','8'},
									{'9','A','B','C'},
									{'D','E','F','?'}};

void Keypad_init(){
	DIO_SetPinDir(KEYPAD_COL_PORT, KEYPAD_COL0, DIO_PIN_OUTPUT);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_COL_PORT, KEYPAD_COL1, DIO_PIN_OUTPUT);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	66 e0       	ldi	r22, 0x06	; 6
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_COL_PORT, KEYPAD_COL2, DIO_PIN_OUTPUT);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	65 e0       	ldi	r22, 0x05	; 5
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_COL_PORT, KEYPAD_COL3, DIO_PIN_OUTPUT);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	
	DIO_SetPinDir(KEYPAD_ROW_PORT, KEYPAD_ROW0, DIO_PIN_INPUT);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT, KEYPAD_ROW1, DIO_PIN_INPUT);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT, KEYPAD_ROW2, DIO_PIN_INPUT);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	63 e0       	ldi	r22, 0x03	; 3
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_ROW_PORT, KEYPAD_ROW3, DIO_PIN_INPUT);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	
	DIO_SetPinVal(KEYPAD_COL_PORT, KEYPAD_COL0, DIO_PIN_HIGH);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	67 e0       	ldi	r22, 0x07	; 7
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	DIO_SetPinVal(KEYPAD_COL_PORT, KEYPAD_COL1, DIO_PIN_HIGH);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	66 e0       	ldi	r22, 0x06	; 6
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	DIO_SetPinVal(KEYPAD_COL_PORT, KEYPAD_COL2, DIO_PIN_HIGH);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	65 e0       	ldi	r22, 0x05	; 5
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	DIO_SetPinVal(KEYPAD_COL_PORT, KEYPAD_COL3, DIO_PIN_HIGH);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 32e:	08 95       	ret

00000330 <Keypad_getkey>:
}

uint8_t Keypad_getkey(){
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
	
	uint8_t col_Loc = 0;
	uint8_t row_Loc = 0;
	
	uint8_t value = 0;
 336:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t temp = 0;
	
	for(col_Loc = COL_INIT ; col_Loc <= COL_FINAL ; col_Loc++)
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	2f c0       	rjmp	.+94     	; 0x39a <Keypad_getkey+0x6a>
	{
		//Activate the column
		DIO_SetPinVal(KEYPAD_COL_PORT , col_Loc , DIO_PIN_LOW);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	6d 2f       	mov	r22, r29
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
		
		for(row_Loc = ROW_INIT ; row_Loc <= ROW_FINAL ; row_Loc++)
 346:	c4 e0       	ldi	r28, 0x04	; 4
 348:	20 c0       	rjmp	.+64     	; 0x38a <Keypad_getkey+0x5a>
		{
			
			temp = DIO_ReadPin(KEYPAD_ROW_PORT , row_Loc);
 34a:	6c 2f       	mov	r22, r28
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_ReadPin>
			
			//wait until the switch is releases
			if(!temp)
 352:	81 11       	cpse	r24, r1
 354:	19 c0       	rjmp	.+50     	; 0x388 <Keypad_getkey+0x58>
			{
				value =  keypadValue[row_Loc - ROW_INIT][col_Loc - COL_INIT];
 356:	ec 2f       	mov	r30, r28
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	34 97       	sbiw	r30, 0x04	; 4
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	e0 5a       	subi	r30, 0xA0	; 160
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	ed 0f       	add	r30, r29
 36a:	f1 1d       	adc	r31, r1
 36c:	10 81       	ld	r17, Z
				
				while(!temp)
 36e:	04 c0       	rjmp	.+8      	; 0x378 <Keypad_getkey+0x48>
				{
					temp = DIO_ReadPin(KEYPAD_ROW_PORT , row_Loc);
 370:	6c 2f       	mov	r22, r28
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_ReadPin>
			//wait until the switch is releases
			if(!temp)
			{
				value =  keypadValue[row_Loc - ROW_INIT][col_Loc - COL_INIT];
				
				while(!temp)
 378:	88 23       	and	r24, r24
 37a:	d1 f3       	breq	.-12     	; 0x370 <Keypad_getkey+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f e3       	ldi	r24, 0x3F	; 63
 37e:	9c e9       	ldi	r25, 0x9C	; 156
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <Keypad_getkey+0x50>
 384:	00 c0       	rjmp	.+0      	; 0x386 <Keypad_getkey+0x56>
 386:	00 00       	nop
	for(col_Loc = COL_INIT ; col_Loc <= COL_FINAL ; col_Loc++)
	{
		//Activate the column
		DIO_SetPinVal(KEYPAD_COL_PORT , col_Loc , DIO_PIN_LOW);
		
		for(row_Loc = ROW_INIT ; row_Loc <= ROW_FINAL ; row_Loc++)
 388:	cf 5f       	subi	r28, 0xFF	; 255
 38a:	c8 30       	cpi	r28, 0x08	; 8
 38c:	f0 f2       	brcs	.-68     	; 0x34a <Keypad_getkey+0x1a>
				_delay_ms(10);
			}
			
		}
		//deactivate column again
		DIO_SetPinVal(KEYPAD_COL_PORT , col_Loc , DIO_PIN_HIGH);
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	6d 2f       	mov	r22, r29
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	uint8_t row_Loc = 0;
	
	uint8_t value = 0;
	uint8_t temp = 0;
	
	for(col_Loc = COL_INIT ; col_Loc <= COL_FINAL ; col_Loc++)
 398:	df 5f       	subi	r29, 0xFF	; 255
 39a:	d4 30       	cpi	r29, 0x04	; 4
 39c:	78 f2       	brcs	.-98     	; 0x33c <Keypad_getkey+0xc>
		
	}
	
	//PORTB &= ~(1<<7);
	return value ;
 39e:	81 2f       	mov	r24, r17
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	08 95       	ret

000003a8 <LCD_WriteCommand>:
		if (position < 20 && position >= 0)
		{
			LCD_WriteCommand(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 3a8:	cf 93       	push	r28
 3aa:	c8 2f       	mov	r28, r24
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 3c0:	88 b3       	in	r24, 0x18	; 24
 3c2:	9c 2f       	mov	r25, r28
 3c4:	92 95       	swap	r25
 3c6:	9f 70       	andi	r25, 0x0F	; 15
 3c8:	97 70       	andi	r25, 0x07	; 7
 3ca:	88 7f       	andi	r24, 0xF8	; 248
 3cc:	89 2b       	or	r24, r25
 3ce:	88 bb       	out	0x18, r24	; 24
 3d0:	cc 23       	and	r28, r28
 3d2:	24 f4       	brge	.+8      	; 0x3dc <LCD_WriteCommand+0x34>
 3d4:	88 b3       	in	r24, 0x18	; 24
 3d6:	80 61       	ori	r24, 0x10	; 16
 3d8:	88 bb       	out	0x18, r24	; 24
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <LCD_WriteCommand+0x3a>
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	8f 7e       	andi	r24, 0xEF	; 239
 3e0:	88 bb       	out	0x18, r24	; 24
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	80 e7       	ldi	r24, 0x70	; 112
 3fa:	92 e0       	ldi	r25, 0x02	; 2
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <LCD_WriteCommand+0x54>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 412:	88 b3       	in	r24, 0x18	; 24
 414:	9c 2f       	mov	r25, r28
 416:	97 70       	andi	r25, 0x07	; 7
 418:	88 7f       	andi	r24, 0xF8	; 248
 41a:	89 2b       	or	r24, r25
 41c:	88 bb       	out	0x18, r24	; 24
 41e:	c3 ff       	sbrs	r28, 3
 420:	04 c0       	rjmp	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 422:	88 b3       	in	r24, 0x18	; 24
 424:	80 61       	ori	r24, 0x10	; 16
 426:	88 bb       	out	0x18, r24	; 24
 428:	03 c0       	rjmp	.+6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	8f 7e       	andi	r24, 0xEF	; 239
 42e:	88 bb       	out	0x18, r24	; 24
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	63 e0       	ldi	r22, 0x03	; 3
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	80 e7       	ldi	r24, 0x70	; 112
 448:	92 e0       	ldi	r25, 0x02	; 2
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	62 e0       	ldi	r22, 0x02	; 2
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <LCD_WriteChar>:
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
	_delay_ms(50);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
}

void LCD_WriteChar(uint8_t character){
 464:	cf 93       	push	r28
 466:	c8 2f       	mov	r28, r24
	
	uint8_t Bit4 = 0;
	
	//LCD_Kick();
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_RS, DIO_PIN_HIGH);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	//DIO_SetPinVal(LCD_4BIT_CMD, LCD_RW, DIO_PIN_LOW);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	
	PORTB = ((character >> 4) & 0x07) | (PORTB & 0xF8);
 47c:	88 b3       	in	r24, 0x18	; 24
 47e:	9c 2f       	mov	r25, r28
 480:	92 95       	swap	r25
 482:	9f 70       	andi	r25, 0x0F	; 15
 484:	97 70       	andi	r25, 0x07	; 7
 486:	88 7f       	andi	r24, 0xF8	; 248
 488:	89 2b       	or	r24, r25
 48a:	88 bb       	out	0x18, r24	; 24
	
	Bit4 = READ_BIT(character, 7);
	
	if(Bit4){
 48c:	cc 23       	and	r28, r28
 48e:	24 f4       	brge	.+8      	; 0x498 <LCD_WriteChar+0x34>
		SET_BIT(PORTB, LCD_D7);
 490:	88 b3       	in	r24, 0x18	; 24
 492:	80 61       	ori	r24, 0x10	; 16
 494:	88 bb       	out	0x18, r24	; 24
 496:	03 c0       	rjmp	.+6      	; 0x49e <LCD_WriteChar+0x3a>
	}
	else{
		CLEAR_BIT(PORTB, LCD_D7);
 498:	88 b3       	in	r24, 0x18	; 24
 49a:	8f 7e       	andi	r24, 0xEF	; 239
 49c:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	80 e7       	ldi	r24, 0x70	; 112
 4ac:	92 e0       	ldi	r25, 0x02	; 2
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <LCD_WriteChar+0x4a>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_WriteChar+0x54>
 4b8:	00 00       	nop
	_delay_ms(50);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
	
	PORTB = (character & 0x07) | (PORTB & 0xF8);
 4c4:	88 b3       	in	r24, 0x18	; 24
 4c6:	9c 2f       	mov	r25, r28
 4c8:	97 70       	andi	r25, 0x07	; 7
 4ca:	88 7f       	andi	r24, 0xF8	; 248
 4cc:	89 2b       	or	r24, r25
 4ce:	88 bb       	out	0x18, r24	; 24
	
	Bit4 = READ_BIT(character, 3);
	
	if(Bit4){
 4d0:	c3 ff       	sbrs	r28, 3
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <LCD_WriteChar+0x78>
		SET_BIT(PORTB, LCD_D7);
 4d4:	88 b3       	in	r24, 0x18	; 24
 4d6:	80 61       	ori	r24, 0x10	; 16
 4d8:	88 bb       	out	0x18, r24	; 24
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <LCD_WriteChar+0x7e>
	}
	else{
		CLEAR_BIT(PORTB, LCD_D7);
 4dc:	88 b3       	in	r24, 0x18	; 24
 4de:	8f 7e       	andi	r24, 0xEF	; 239
 4e0:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	80 e7       	ldi	r24, 0x70	; 112
 4f0:	92 e0       	ldi	r25, 0x02	; 2
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <LCD_WriteChar+0x8e>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_WriteChar+0x98>
 4fc:	00 00       	nop
	_delay_ms(50);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	62 e0       	ldi	r22, 0x02	; 2
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinVal>
}
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <LCD_ClearScreen>:
		}
	}
}

void LCD_ClearScreen(void){
	LCD_WriteCommand(LCD_CLEAR_SCREEN);
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
 512:	08 95       	ret

00000514 <LCD_init>:
	}
}

void LCD_init(void){

	DIO_SetPinDir(LCD_4BIT_CMD, LCD_RS, DIO_PIN_OUTPUT);
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	63 e0       	ldi	r22, 0x03	; 3
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD, LCD_RW, DIO_PIN_OUTPUT);
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD, LCD_EN, DIO_PIN_OUTPUT);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_SetPinDir>
	DIO_SetPortDir(LCD_4BIT_DATA, DIO_PORT_HIGH);
 532:	6f ef       	ldi	r22, 0xFF	; 255
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPortDir>
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	89 ef       	ldi	r24, 0xF9	; 249
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <LCD_init+0x2c>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_init+0x36>
 54a:	00 00       	nop
	
	_delay_ms(20);
	
	LCD_WriteCommand(LCD_FUNCTION_4BIT_2LINES);
 54c:	88 e2       	ldi	r24, 0x28	; 40
 54e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_ENTRY_MODE);
 552:	86 e0       	ldi	r24, 0x06	; 6
 554:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW);
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_DISP_ON_CURSOR_BLINK);
 55e:	8f e0       	ldi	r24, 0x0F	; 15
 560:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
	
	LCD_ClearScreen();
 564:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_ClearScreen>
 568:	08 95       	ret

0000056a <main>:
int main(void)
{
	uint8_t key_pressed;
	//DDRB = 1<<7;
	
    LCD_init();
 56a:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_init>
	Keypad_init();
 56e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Keypad_init>
	LCD_ClearScreen();
 572:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_ClearScreen>
    //const uint8_t *str = "Ahmed Essam ElDin   ElShafie";
    //LCD_WriteString(str);
	
    while (1) 
    {
		key_pressed = Keypad_getkey();
 576:	0e 94 98 01 	call	0x330	; 0x330 <Keypad_getkey>
		switch(key_pressed){
 57a:	8f 33       	cpi	r24, 0x3F	; 63
 57c:	19 f4       	brne	.+6      	; 0x584 <main+0x1a>
			case '?':
			LCD_ClearScreen();
 57e:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_ClearScreen>
			break;
 582:	f9 cf       	rjmp	.-14     	; 0x576 <main+0xc>
			default:
			LCD_WriteChar(key_pressed);
 584:	0e 94 32 02 	call	0x464	; 0x464 <LCD_WriteChar>
			break;
 588:	f6 cf       	rjmp	.-20     	; 0x576 <main+0xc>

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
