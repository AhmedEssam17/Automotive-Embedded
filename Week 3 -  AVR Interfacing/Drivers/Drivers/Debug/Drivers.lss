
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000700  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800070  00800070  000007a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001409  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e9  00000000  00000000  00001d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acc  00000000  00000000  000026fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000031c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000612  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099b  00000000  00000000  000039ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  8a:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WriteCommand>:
	LCD_WriteCommand(LCD_DISP_ON_CURSOR_BLINK);
	
	LCD_ClearScreen();
}

void LCD_WriteCommand(uint8_t command){
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	
	uint8_t Bit4 = 0;
	
	//LCD_Kick();
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_RS, DIO_PIN_LOW);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	//DIO_SetPinVal(LCD_4BIT_CMD, LCD_RW, DIO_PIN_LOW);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	
	PORTB = ((command >> 4) & 0x07) | (PORTB & 0xF8);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	9c 2f       	mov	r25, r28
  ae:	92 95       	swap	r25
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	97 70       	andi	r25, 0x07	; 7
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	89 2b       	or	r24, r25
  b8:	88 bb       	out	0x18, r24	; 24
	
	Bit4 = READ_BIT(command, 7);
	
	if(Bit4){
  ba:	cc 23       	and	r28, r28
  bc:	24 f4       	brge	.+8      	; 0xc6 <LCD_WriteCommand+0x34>
		SET_BIT(PORTB, LCD_D7);
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	03 c0       	rjmp	.+6      	; 0xcc <LCD_WriteCommand+0x3a>
	}
	else{
		CLEAR_BIT(PORTB, LCD_D7);
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8f 7e       	andi	r24, 0xEF	; 239
  ca:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_RS, DIO_PIN_LOW);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9e e4       	ldi	r25, 0x4E	; 78
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WriteCommand+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WriteCommand+0x58>
  ea:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	
	PORTB = (command & 0x07) | (PORTB & 0xF8);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	9c 2f       	mov	r25, r28
  fa:	97 70       	andi	r25, 0x07	; 7
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	89 2b       	or	r24, r25
 100:	88 bb       	out	0x18, r24	; 24
	
	Bit4 = READ_BIT(command, 3);
	
	if(Bit4){
 102:	c3 ff       	sbrs	r28, 3
 104:	04 c0       	rjmp	.+8      	; 0x10e <LCD_WriteCommand+0x7c>
		SET_BIT(PORTB, LCD_D7);
 106:	88 b3       	in	r24, 0x18	; 24
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	03 c0       	rjmp	.+6      	; 0x114 <LCD_WriteCommand+0x82>
	}
	else{
		CLEAR_BIT(PORTB, LCD_D7);
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_RS, DIO_PIN_LOW);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_WriteCommand+0x9a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_WriteCommand+0xa0>
 132:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <LCD_Position>:
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
}

void LCD_Position(uint8_t line, uint8_t position){
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	c8 2f       	mov	r28, r24
 148:	d6 2f       	mov	r29, r22
	if (line == 1)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	31 f4       	brne	.+12     	; 0x15a <LCD_Position+0x18>
	{
		if (position < 20 && position >= 0)
 14e:	64 31       	cpi	r22, 0x14	; 20
 150:	20 f4       	brcc	.+8      	; 0x15a <LCD_Position+0x18>
		{
			LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW+position);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	86 0f       	add	r24, r22
 156:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
		}
	}
	if (line == 2)
 15a:	c2 30       	cpi	r28, 0x02	; 2
 15c:	31 f4       	brne	.+12     	; 0x16a <LCD_Position+0x28>
	{
		if (position < 20 && position >= 0)
 15e:	d4 31       	cpi	r29, 0x14	; 20
 160:	20 f4       	brcc	.+8      	; 0x16a <LCD_Position+0x28>
		{
			LCD_WriteCommand(LCD_BEGIN_AT_SECOND_ROW+position);
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	8d 0f       	add	r24, r29
 166:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
		}
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <LCD_WriteChar>:
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
}

void LCD_WriteChar(uint8_t character){
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
	
	uint8_t Bit4 = 0;
	
	//LCD_Kick();
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_RS, DIO_PIN_HIGH);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	//DIO_SetPinVal(LCD_4BIT_CMD, LCD_RW, DIO_PIN_LOW);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	
	PORTB = ((character >> 4) & 0x07) | (PORTB & 0xF8);
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	9c 2f       	mov	r25, r28
 18c:	92 95       	swap	r25
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	97 70       	andi	r25, 0x07	; 7
 192:	88 7f       	andi	r24, 0xF8	; 248
 194:	89 2b       	or	r24, r25
 196:	88 bb       	out	0x18, r24	; 24
	
	Bit4 = READ_BIT(character, 7);
	
	if(Bit4){
 198:	cc 23       	and	r28, r28
 19a:	24 f4       	brge	.+8      	; 0x1a4 <LCD_WriteChar+0x34>
		SET_BIT(PORTB, LCD_D7);
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <LCD_WriteChar+0x3a>
	}
	else{
		CLEAR_BIT(PORTB, LCD_D7);
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	8f 7e       	andi	r24, 0xEF	; 239
 1a8:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	9e e4       	ldi	r25, 0x4E	; 78
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_WriteChar+0x48>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_WriteChar+0x4e>
 1be:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
	
	PORTB = (character & 0x07) | (PORTB & 0xF8);
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	9c 2f       	mov	r25, r28
 1ce:	97 70       	andi	r25, 0x07	; 7
 1d0:	88 7f       	andi	r24, 0xF8	; 248
 1d2:	89 2b       	or	r24, r25
 1d4:	88 bb       	out	0x18, r24	; 24
	
	Bit4 = READ_BIT(character, 3);
	
	if(Bit4){
 1d6:	c3 ff       	sbrs	r28, 3
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <LCD_WriteChar+0x72>
		SET_BIT(PORTB, LCD_D7);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <LCD_WriteChar+0x78>
	}
	else{
		CLEAR_BIT(PORTB, LCD_D7);
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8f 7e       	andi	r24, 0xEF	; 239
 1e6:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
 1f2:	8f e1       	ldi	r24, 0x1F	; 31
 1f4:	9e e4       	ldi	r25, 0x4E	; 78
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_WriteChar+0x86>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_WriteChar+0x8c>
 1fc:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_SetPinVal>
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCD_ClearScreen>:
		}
	}
}

void LCD_ClearScreen(void){
	LCD_WriteCommand(LCD_CLEAR_SCREEN);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
 212:	08 95       	ret

00000214 <LCD_init>:
	}
}

void LCD_init(void){

	DIO_SetPinDir(LCD_4BIT_CMD, LCD_RS, DIO_PIN_OUTPUT);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD, LCD_RW, DIO_PIN_OUTPUT);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD, LCD_EN, DIO_PIN_OUTPUT);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_SetPinDir>
	DIO_SetPortDir(LCD_4BIT_DATA, DIO_PORT_HIGH);
 232:	6f ef       	ldi	r22, 0xFF	; 255
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPortDir>
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	9e e4       	ldi	r25, 0x4E	; 78
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_init+0x2a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_init+0x30>
 244:	00 00       	nop
	
	_delay_ms(5);
	
	LCD_WriteCommand(LCD_FUNCTION_4BIT_2LINES);
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_ENTRY_MODE);
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_BEGIN_AT_FIRST_ROW);
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_DISP_ON_CURSOR_BLINK);
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WriteCommand>
	
	LCD_ClearScreen();
 25e:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_ClearScreen>
 262:	08 95       	ret

00000264 <LCD_WriteString>:
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_HIGH);
	_delay_ms(5);
	DIO_SetPinVal(LCD_4BIT_CMD, LCD_EN, DIO_PIN_LOW);
}

void LCD_WriteString(const uint8_t* str){
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	8c 01       	movw	r16, r24
	
	int count = 0;
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	d0 e0       	ldi	r29, 0x00	; 0
	while (*str != '\0'){
 272:	18 c0       	rjmp	.+48     	; 0x2a4 <LCD_WriteString+0x40>
		count++;
 274:	21 96       	adiw	r28, 0x01	; 1
		LCD_WriteChar(*str++);
 276:	0f 5f       	subi	r16, 0xFF	; 255
 278:	1f 4f       	sbci	r17, 0xFF	; 255
 27a:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_WriteChar>
		if (count == 20)
 27e:	c4 31       	cpi	r28, 0x14	; 20
 280:	d1 05       	cpc	r29, r1
 282:	29 f4       	brne	.+10     	; 0x28e <LCD_WriteString+0x2a>
		{
			LCD_Position(2,0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Position>
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <LCD_WriteString+0x40>
		}
		else if (count == 40)
 28e:	c8 32       	cpi	r28, 0x28	; 40
 290:	d1 05       	cpc	r29, r1
 292:	41 f4       	brne	.+16     	; 0x2a4 <LCD_WriteString+0x40>
		{
			LCD_ClearScreen();
 294:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_ClearScreen>
			LCD_Position(1,0);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Position>
			count = 0;
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_WriteString(const uint8_t* str){
	
	int count = 0;
	while (*str != '\0'){
 2a4:	f8 01       	movw	r30, r16
 2a6:	80 81       	ld	r24, Z
 2a8:	81 11       	cpse	r24, r1
 2aa:	e4 cf       	rjmp	.-56     	; 0x274 <LCD_WriteString+0x10>
			LCD_ClearScreen();
			LCD_Position(1,0);
			count = 0;
		}
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <ADC_Callback>:
ADC_Config_t ADC_Config;
char buffer[10];
const uint8_t *LCD_Data = "ADC Value = ";

void ADC_Callback(void){
	if(ADC_Config.ADC_Result_Presentation == ADC_Result_Presentation_RIGHT){
 2b6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <ADC_Config+0x2>
 2ba:	81 11       	cpse	r24, r1
 2bc:	0c c0       	rjmp	.+24     	; 0x2d6 <ADC_Callback+0x20>
		ADC_Data = (ADCL | ((ADCH & (0x03)) << 8));
 2be:	24 b1       	in	r18, 0x04	; 4
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	83 70       	andi	r24, 0x03	; 3
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	98 2f       	mov	r25, r24
 2c8:	88 27       	eor	r24, r24
 2ca:	82 2b       	or	r24, r18
 2cc:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <ADC_Data+0x1>
 2d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <ADC_Data>
 2d4:	10 c0       	rjmp	.+32     	; 0x2f6 <ADC_Callback+0x40>
	}
	else{
		ADC_Data = ((ADCL & (0xC0)) >> 6) | (ADCH << 2);
 2d6:	24 b1       	in	r18, 0x04	; 4
 2d8:	22 95       	swap	r18
 2da:	26 95       	lsr	r18
 2dc:	26 95       	lsr	r18
 2de:	23 70       	andi	r18, 0x03	; 3
 2e0:	85 b1       	in	r24, 0x05	; 5
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	82 2b       	or	r24, r18
 2ee:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <ADC_Data+0x1>
 2f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <ADC_Data>
	}
	
	CLEAR_BIT(ADCSRA, 4);
 2f6:	86 b1       	in	r24, 0x06	; 6
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	86 b9       	out	0x06, r24	; 6
 2fc:	08 95       	ret

000002fe <main>:
}

int main(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	27 97       	sbiw	r28, 0x07	; 7
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
	
	ADC_Config_t ADC_Config;
	
	ADC_Config.ADC_MODE = ADC_MODE_SINGLE_CONVERSION;
 312:	19 82       	std	Y+1, r1	; 0x01
	ADC_Config.ADC_PRESCALER = ADC_PRESCALER_128;
 314:	87 e0       	ldi	r24, 0x07	; 7
 316:	8c 83       	std	Y+4, r24	; 0x04
	ADC_Config.ADC_Result_Presentation = ADC_Result_Presentation_RIGHT;
 318:	1b 82       	std	Y+3, r1	; 0x03
	ADC_Config.ADC_VREF = ADC_VREF_AVCC;
 31a:	80 e4       	ldi	r24, 0x40	; 64
 31c:	8a 83       	std	Y+2, r24	; 0x02
	ADC_Config.IRQ_Enable = ADC_IRQ_ENABLE;
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	8d 83       	std	Y+5, r24	; 0x05
	ADC_Config.P_CallBack = ADC_Callback;
 322:	8b e5       	ldi	r24, 0x5B	; 91
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	9f 83       	std	Y+7, r25	; 0x07
 328:	8e 83       	std	Y+6, r24	; 0x06
	ADC_init(&ADC_Config);
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	0e 94 c7 01 	call	0x38e	; 0x38e <ADC_init>
	
	DIO_SetPinDir(DIO_PORTA, DIO_PIN0, DIO_PIN_INPUT);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_SetPinDir>
	LCD_init();
 33c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_init>
	LCD_ClearScreen();
 340:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_ClearScreen>
	
    /* Replace with your application code */
    while (1) 
    {
		ADC_ReadData(ADC1, &ADC_Data, Polling_DISABLE);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	61 e8       	ldi	r22, 0x81	; 129
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <ADC_ReadData>
		LCD_WriteString(LCD_Data);
 350:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 354:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 358:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WriteString>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 35c:	4a e0       	ldi	r20, 0x0A	; 10
 35e:	60 e7       	ldi	r22, 0x70	; 112
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <ADC_Data>
 366:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <ADC_Data+0x1>
 36a:	0e 94 49 03 	call	0x692	; 0x692 <__itoa_ncheck>
		itoa(ADC_Data, buffer, 10); 
		LCD_WriteString(buffer);
 36e:	80 e7       	ldi	r24, 0x70	; 112
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 32 01 	call	0x264	; 0x264 <LCD_WriteString>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	83 ed       	ldi	r24, 0xD3	; 211
 37a:	90 e3       	ldi	r25, 0x30	; 48
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x7e>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x88>
 386:	00 00       	nop
		_delay_ms(1000);
		LCD_ClearScreen();
 388:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_ClearScreen>
 38c:	db cf       	rjmp	.-74     	; 0x344 <main+0x46>

0000038e <ADC_init>:
//====================================================================
ADC_Config_t Global_ADC_Config;
EXTI_Config_t *EXTI_Config;

void ADC_init(ADC_Config_t* ADC_Config)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
	Global_ADC_Config = *ADC_Config;
 394:	87 e0       	ldi	r24, 0x07	; 7
 396:	fe 01       	movw	r30, r28
 398:	a3 e8       	ldi	r26, 0x83	; 131
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	01 90       	ld	r0, Z+
 39e:	0d 92       	st	X+, r0
 3a0:	8a 95       	dec	r24
 3a2:	e1 f7       	brne	.-8      	; 0x39c <ADC_init+0xe>
	
	//-----------------------------
	//1) Set ADC Mode (ADCSRA >> ADSC)
	//-----------------------------
	ADCSRA |= ADC_Config->ADC_MODE;
 3a4:	96 b1       	in	r25, 0x06	; 6
 3a6:	88 81       	ld	r24, Y
 3a8:	89 2b       	or	r24, r25
 3aa:	86 b9       	out	0x06, r24	; 6
	
	//-----------------------------
	//2) Set ADC Vref (ADMUX >> REFS0)
	//-----------------------------
	ADMUX |= ADC_Config->ADC_VREF;
 3ac:	97 b1       	in	r25, 0x07	; 7
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	89 2b       	or	r24, r25
 3b2:	87 b9       	out	0x07, r24	; 7
	
	//-----------------------------
	//3) Set Result Presentation (ADMUX >> ADLAR)
	//-----------------------------
	ADMUX |= ADC_Config->ADC_Result_Presentation;
 3b4:	97 b1       	in	r25, 0x07	; 7
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	89 2b       	or	r24, r25
 3ba:	87 b9       	out	0x07, r24	; 7
	
	//-----------------------------
	//4) Set ADC Prescaler (ADCSRA >> ADPS0)
	//-----------------------------
	ADCSRA |= ADC_Config->ADC_PRESCALER;
 3bc:	96 b1       	in	r25, 0x06	; 6
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	89 2b       	or	r24, r25
 3c2:	86 b9       	out	0x06, r24	; 6
	
	//-----------------------------
	//5) Enable/Disable IRQ (ADCSRA >> ADIE)
	//-----------------------------
	ADCSRA |= ADC_Config->IRQ_Enable;
 3c4:	96 b1       	in	r25, 0x06	; 6
 3c6:	8c 81       	ldd	r24, Y+4	; 0x04
 3c8:	89 2b       	or	r24, r25
 3ca:	86 b9       	out	0x06, r24	; 6
	
	
	if (ADC_Config->IRQ_Enable == ADC_IRQ_ENABLE)
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <ADC_init+0x46>
	{
		sei();
 3d2:	78 94       	sei
	}

	//-----------------------------
	//6) Enable ADC Module
	//-----------------------------
	SET_BIT(ADCSRA, 7);
 3d4:	86 b1       	in	r24, 0x06	; 6
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	86 b9       	out	0x06, r24	; 6
	
	//-----------------------------
	//6) Start Conversion with ADC FREE Running mode
	//-----------------------------
	if(ADC_Config->ADC_MODE == ADC_MODE_FREE_RUNNING){
 3da:	88 81       	ld	r24, Y
 3dc:	80 34       	cpi	r24, 0x40	; 64
 3de:	19 f4       	brne	.+6      	; 0x3e6 <ADC_init+0x58>
		SET_BIT(ADCSRA, 6);
 3e0:	86 b1       	in	r24, 0x06	; 6
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	86 b9       	out	0x06, r24	; 6
	}
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <ADC_ReadData>:
void ADC_ReadData(Channel_Select_t channel, uint16_t* data, Polling_Mechanism_t Polling){
	
	//-----------------------------
	//1) Reset ADMUX
	//-----------------------------
	ADMUX &= ~(0x1F);
 3ec:	97 b1       	in	r25, 0x07	; 7
 3ee:	90 7e       	andi	r25, 0xE0	; 224
 3f0:	97 b9       	out	0x07, r25	; 7
	
	//-----------------------------
	//2) select ADC Channel and Configure it to be Input
	//-----------------------------
	ADMUX |= (uint8_t)channel;
 3f2:	97 b1       	in	r25, 0x07	; 7
 3f4:	98 2b       	or	r25, r24
 3f6:	97 b9       	out	0x07, r25	; 7
	CLEAR_BIT(DDRA, channel);
 3f8:	5a b3       	in	r21, 0x1a	; 26
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	cf 01       	movw	r24, r30
 40c:	80 95       	com	r24
 40e:	85 23       	and	r24, r21
 410:	8a bb       	out	0x1a, r24	; 26
	
	//-----------------------------
	//3) Start Conversion
	//-----------------------------
	if(Global_ADC_Config.ADC_MODE == ADC_MODE_SINGLE_CONVERSION){
 412:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Global_ADC_Config>
 416:	81 11       	cpse	r24, r1
 418:	03 c0       	rjmp	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		SET_BIT(ADCSRA, 6);
 41a:	86 b1       	in	r24, 0x06	; 6
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	86 b9       	out	0x06, r24	; 6
	}
	
	//-----------------------------
	//4) Check for using Polling Mechanism
	//-----------------------------
	if(Polling == Polling_ENABLE){
 420:	41 11       	cpse	r20, r1
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		while(!READ_BIT(ADCSRA, 4));
 424:	34 9b       	sbis	0x06, 4	; 6
 426:	fe cf       	rjmp	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	}
	
	//-----------------------------
	//5) Read Converted Data
	//-----------------------------
	if(Global_ADC_Config.ADC_Result_Presentation == ADC_Result_Presentation_RIGHT){
 428:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Global_ADC_Config+0x2>
 42c:	81 11       	cpse	r24, r1
 42e:	0b c0       	rjmp	.+22     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		*data = (ADCL | ((ADCH & (0x03)) << 8));
 430:	24 b1       	in	r18, 0x04	; 4
 432:	85 b1       	in	r24, 0x05	; 5
 434:	83 70       	andi	r24, 0x03	; 3
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	98 2f       	mov	r25, r24
 43a:	88 27       	eor	r24, r24
 43c:	82 2b       	or	r24, r18
 43e:	fb 01       	movw	r30, r22
 440:	91 83       	std	Z+1, r25	; 0x01
 442:	80 83       	st	Z, r24
 444:	0f c0       	rjmp	.+30     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	else{
		*data = ((ADCL & (0xC0)) >> 6) | (ADCH << 2);
 446:	24 b1       	in	r18, 0x04	; 4
 448:	22 95       	swap	r18
 44a:	26 95       	lsr	r18
 44c:	26 95       	lsr	r18
 44e:	23 70       	andi	r18, 0x03	; 3
 450:	85 b1       	in	r24, 0x05	; 5
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	82 2b       	or	r24, r18
 45e:	fb 01       	movw	r30, r22
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	80 83       	st	Z, r24
	}
	
	//-----------------------------
	//6) Clear ADIF flag
	//-----------------------------
	CLEAR_BIT(ADCSRA, 4);
 464:	86 b1       	in	r24, 0x06	; 6
 466:	8f 7e       	andi	r24, 0xEF	; 239
 468:	86 b9       	out	0x06, r24	; 6
 46a:	08 95       	ret

0000046c <__vector_16>:
}

ISR(ADC_vect){
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	Global_ADC_Config.P_CallBack();
 48e:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Global_ADC_Config+0x5>
 492:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Global_ADC_Config+0x6>
 496:	09 95       	icall
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <DIO_SetPortDir>:
		case DIO_PORTC:
		PORTC = value;
		break;
		
		case DIO_PORTD:
		PORTD = value;
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	41 f0       	breq	.+16     	; 0x4ce <DIO_SetPortDir+0x14>
 4be:	28 f0       	brcs	.+10     	; 0x4ca <DIO_SetPortDir+0x10>
 4c0:	82 30       	cpi	r24, 0x02	; 2
 4c2:	39 f0       	breq	.+14     	; 0x4d2 <DIO_SetPortDir+0x18>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <DIO_SetPortDir+0x1c>
 4c8:	08 95       	ret
 4ca:	6a bb       	out	0x1a, r22	; 26
 4cc:	08 95       	ret
 4ce:	67 bb       	out	0x17, r22	; 23
 4d0:	08 95       	ret
 4d2:	64 bb       	out	0x14, r22	; 20
 4d4:	08 95       	ret
 4d6:	61 bb       	out	0x11, r22	; 17
 4d8:	08 95       	ret

000004da <DIO_SetPinDir>:
 4da:	44 23       	and	r20, r20
 4dc:	a1 f1       	breq	.+104    	; 0x546 <DIO_SetPinDir+0x6c>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	89 f0       	breq	.+34     	; 0x504 <DIO_SetPinDir+0x2a>
 4e2:	28 f0       	brcs	.+10     	; 0x4ee <DIO_SetPinDir+0x14>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	c9 f0       	breq	.+50     	; 0x51a <DIO_SetPinDir+0x40>
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	11 f1       	breq	.+68     	; 0x530 <DIO_SetPinDir+0x56>
 4ec:	08 95       	ret
 4ee:	2a b3       	in	r18, 0x1a	; 26
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_SetPinDir+0x20>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_SetPinDir+0x1c>
 4fe:	82 2b       	or	r24, r18
 500:	8a bb       	out	0x1a, r24	; 26
 502:	08 95       	ret
 504:	27 b3       	in	r18, 0x17	; 23
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_SetPinDir+0x36>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_SetPinDir+0x32>
 514:	82 2b       	or	r24, r18
 516:	87 bb       	out	0x17, r24	; 23
 518:	08 95       	ret
 51a:	24 b3       	in	r18, 0x14	; 20
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_SetPinDir+0x4c>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_SetPinDir+0x48>
 52a:	82 2b       	or	r24, r18
 52c:	84 bb       	out	0x14, r24	; 20
 52e:	08 95       	ret
 530:	21 b3       	in	r18, 0x11	; 17
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_SetPinDir+0x62>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_SetPinDir+0x5e>
 540:	82 2b       	or	r24, r18
 542:	81 bb       	out	0x11, r24	; 17
 544:	08 95       	ret
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	91 f0       	breq	.+36     	; 0x56e <DIO_SetPinDir+0x94>
 54a:	28 f0       	brcs	.+10     	; 0x556 <DIO_SetPinDir+0x7c>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	d9 f0       	breq	.+54     	; 0x586 <DIO_SetPinDir+0xac>
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	29 f1       	breq	.+74     	; 0x59e <DIO_SetPinDir+0xc4>
 554:	08 95       	ret
 556:	2a b3       	in	r18, 0x1a	; 26
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_SetPinDir+0x88>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_SetPinDir+0x84>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	8a bb       	out	0x1a, r24	; 26
 56c:	08 95       	ret
 56e:	27 b3       	in	r18, 0x17	; 23
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_SetPinDir+0xa0>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_SetPinDir+0x9c>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	87 bb       	out	0x17, r24	; 23
 584:	08 95       	ret
 586:	24 b3       	in	r18, 0x14	; 20
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_SetPinDir+0xb8>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_SetPinDir+0xb4>
 596:	80 95       	com	r24
 598:	82 23       	and	r24, r18
 59a:	84 bb       	out	0x14, r24	; 20
 59c:	08 95       	ret
 59e:	21 b3       	in	r18, 0x11	; 17
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_SetPinDir+0xd0>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_SetPinDir+0xcc>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	81 bb       	out	0x11, r24	; 17
 5b4:	08 95       	ret

000005b6 <DIO_SetPinVal>:
	}
}

void DIO_SetPinVal(uint8_t PORTx, uint8_t PINx, uint8_t value){
	
	if(value){
 5b6:	44 23       	and	r20, r20
 5b8:	a1 f1       	breq	.+104    	; 0x622 <DIO_SetPinVal+0x6c>
		switch(PORTx){
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	89 f0       	breq	.+34     	; 0x5e0 <DIO_SetPinVal+0x2a>
 5be:	28 f0       	brcs	.+10     	; 0x5ca <DIO_SetPinVal+0x14>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	c9 f0       	breq	.+50     	; 0x5f6 <DIO_SetPinVal+0x40>
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	11 f1       	breq	.+68     	; 0x60c <DIO_SetPinVal+0x56>
 5c8:	08 95       	ret
			case DIO_PORTA:
			SET_BIT(PORTA, PINx);
 5ca:	2b b3       	in	r18, 0x1b	; 27
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_SetPinVal+0x20>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_SetPinVal+0x1c>
 5da:	82 2b       	or	r24, r18
 5dc:	8b bb       	out	0x1b, r24	; 27
			break;
 5de:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB, PINx);
 5e0:	28 b3       	in	r18, 0x18	; 24
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_SetPinVal+0x36>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_SetPinVal+0x32>
 5f0:	82 2b       	or	r24, r18
 5f2:	88 bb       	out	0x18, r24	; 24
			break;
 5f4:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC, PINx);
 5f6:	25 b3       	in	r18, 0x15	; 21
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_SetPinVal+0x4c>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_SetPinVal+0x48>
 606:	82 2b       	or	r24, r18
 608:	85 bb       	out	0x15, r24	; 21
			break;
 60a:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD, PINx);
 60c:	22 b3       	in	r18, 0x12	; 18
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_SetPinVal+0x62>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_SetPinVal+0x5e>
 61c:	82 2b       	or	r24, r18
 61e:	82 bb       	out	0x12, r24	; 18
			break;
 620:	08 95       	ret
			default:
			break;
		}
	}
	else{
		switch(PORTx){
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	91 f0       	breq	.+36     	; 0x64a <DIO_SetPinVal+0x94>
 626:	28 f0       	brcs	.+10     	; 0x632 <DIO_SetPinVal+0x7c>
 628:	82 30       	cpi	r24, 0x02	; 2
 62a:	d9 f0       	breq	.+54     	; 0x662 <DIO_SetPinVal+0xac>
 62c:	83 30       	cpi	r24, 0x03	; 3
 62e:	29 f1       	breq	.+74     	; 0x67a <DIO_SetPinVal+0xc4>
 630:	08 95       	ret
			case DIO_PORTA:
			CLEAR_BIT(PORTA, PINx);
 632:	2b b3       	in	r18, 0x1b	; 27
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_SetPinVal+0x88>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_SetPinVal+0x84>
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	8b bb       	out	0x1b, r24	; 27
			break;
 648:	08 95       	ret
			
			case DIO_PORTB:
			CLEAR_BIT(PORTB, PINx);
 64a:	28 b3       	in	r18, 0x18	; 24
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_SetPinVal+0xa0>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_SetPinVal+0x9c>
 65a:	80 95       	com	r24
 65c:	82 23       	and	r24, r18
 65e:	88 bb       	out	0x18, r24	; 24
			break;
 660:	08 95       	ret
			
			case DIO_PORTC:
			CLEAR_BIT(PORTC, PINx);
 662:	25 b3       	in	r18, 0x15	; 21
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_SetPinVal+0xb8>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	6a 95       	dec	r22
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_SetPinVal+0xb4>
 672:	80 95       	com	r24
 674:	82 23       	and	r24, r18
 676:	85 bb       	out	0x15, r24	; 21
			break;
 678:	08 95       	ret
			
			case DIO_PORTD:
			CLEAR_BIT(PORTD, PINx);
 67a:	22 b3       	in	r18, 0x12	; 18
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_SetPinVal+0xd0>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	6a 95       	dec	r22
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_SetPinVal+0xcc>
 68a:	80 95       	com	r24
 68c:	82 23       	and	r24, r18
 68e:	82 bb       	out	0x12, r24	; 18
 690:	08 95       	ret

00000692 <__itoa_ncheck>:
 692:	bb 27       	eor	r27, r27
 694:	4a 30       	cpi	r20, 0x0A	; 10
 696:	31 f4       	brne	.+12     	; 0x6a4 <__itoa_ncheck+0x12>
 698:	99 23       	and	r25, r25
 69a:	22 f4       	brpl	.+8      	; 0x6a4 <__itoa_ncheck+0x12>
 69c:	bd e2       	ldi	r27, 0x2D	; 45
 69e:	90 95       	com	r25
 6a0:	81 95       	neg	r24
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__utoa_common>

000006a8 <__utoa_ncheck>:
 6a8:	bb 27       	eor	r27, r27

000006aa <__utoa_common>:
 6aa:	fb 01       	movw	r30, r22
 6ac:	55 27       	eor	r21, r21
 6ae:	aa 27       	eor	r26, r26
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	aa 1f       	adc	r26, r26
 6b6:	a4 17       	cp	r26, r20
 6b8:	10 f0       	brcs	.+4      	; 0x6be <__utoa_common+0x14>
 6ba:	a4 1b       	sub	r26, r20
 6bc:	83 95       	inc	r24
 6be:	50 51       	subi	r21, 0x10	; 16
 6c0:	b9 f7       	brne	.-18     	; 0x6b0 <__utoa_common+0x6>
 6c2:	a0 5d       	subi	r26, 0xD0	; 208
 6c4:	aa 33       	cpi	r26, 0x3A	; 58
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <__utoa_common+0x20>
 6c8:	a9 5d       	subi	r26, 0xD9	; 217
 6ca:	a1 93       	st	Z+, r26
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	79 f7       	brne	.-34     	; 0x6ae <__utoa_common+0x4>
 6d0:	b1 11       	cpse	r27, r1
 6d2:	b1 93       	st	Z+, r27
 6d4:	11 92       	st	Z+, r1
 6d6:	cb 01       	movw	r24, r22
 6d8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <strrev>

000006dc <strrev>:
 6dc:	dc 01       	movw	r26, r24
 6de:	fc 01       	movw	r30, r24
 6e0:	67 2f       	mov	r22, r23
 6e2:	71 91       	ld	r23, Z+
 6e4:	77 23       	and	r23, r23
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <strrev+0x4>
 6e8:	32 97       	sbiw	r30, 0x02	; 2
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <strrev+0x18>
 6ec:	7c 91       	ld	r23, X
 6ee:	6d 93       	st	X+, r22
 6f0:	70 83       	st	Z, r23
 6f2:	62 91       	ld	r22, -Z
 6f4:	ae 17       	cp	r26, r30
 6f6:	bf 07       	cpc	r27, r31
 6f8:	c8 f3       	brcs	.-14     	; 0x6ec <strrev+0x10>
 6fa:	08 95       	ret

000006fc <_exit>:
 6fc:	f8 94       	cli

000006fe <__stop_program>:
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <__stop_program>
