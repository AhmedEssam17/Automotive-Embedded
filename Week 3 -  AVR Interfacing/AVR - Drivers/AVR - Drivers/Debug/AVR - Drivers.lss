
AVR - Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800060  00800060  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1e  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000872  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000628  00000000  00000000  00002b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003147  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_10>
  2c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer0_Callback>:
uint32_t Timer_Counter = 0;
TIMER0_Config_t TIMER0_Config;


void Timer0_Callback(void){
	if(Timer_Counter < 125){
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  96:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  9a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_end+0x2>
  9e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_end+0x3>
  a2:	8d 37       	cpi	r24, 0x7D	; 125
  a4:	91 05       	cpc	r25, r1
  a6:	a1 05       	cpc	r26, r1
  a8:	b1 05       	cpc	r27, r1
  aa:	58 f4       	brcc	.+22     	; 0xc2 <Timer0_Callback+0x30>
		Timer_Counter++;
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	a1 1d       	adc	r26, r1
  b0:	b1 1d       	adc	r27, r1
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
  b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
  ba:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_end+0x2>
  be:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_end+0x3>
  c2:	08 95       	ret

000000c4 <main>:
{
	
	//LCD_init();
	//LCD_ClearScreen();
	
	DIO_SetPinDir(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	67 e0       	ldi	r22, 0x07	; 7
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTA, DIO_PIN4, DIO_PIN_OUTPUT);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTA, DIO_PIN5, DIO_PIN_OUTPUT);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTA, DIO_PIN6, DIO_PIN_OUTPUT);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	66 e0       	ldi	r22, 0x06	; 6
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinDir>
	
	SET_BIT(PORTA, DIO_PIN4);
  ec:	8b b3       	in	r24, 0x1b	; 27
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA, DIO_PIN6);
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	8b bb       	out	0x1b, r24	; 27
	
	TIMER0_Config.Timer_Mode = TIMER0_MODE_CTC;
  f8:	e6 e6       	ldi	r30, 0x66	; 102
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	TIMER0_Config.Clock_Source = TIMER0_PRESCALER_256;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	81 83       	std	Z+1, r24	; 0x01
	TIMER0_Config.IRQ_Enable = TIMER0_IRQ_ENABLE_OCIE0;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	82 83       	std	Z+2, r24	; 0x02
	TIMER0_Config.Initial_Value = 0;
 108:	13 82       	std	Z+3, r1	; 0x03
	TIMER0_Config.P_CallBack = Timer0_Callback;
 10a:	89 e4       	ldi	r24, 0x49	; 73
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	95 83       	std	Z+5, r25	; 0x05
 110:	84 83       	std	Z+4, r24	; 0x04
	TIMER0_init(&TIMER0_Config);
 112:	cf 01       	movw	r24, r30
 114:	0e 94 49 01 	call	0x292	; 0x292 <TIMER0_init>
	
	TIMER0_setCompareValue(250);
 118:	8a ef       	ldi	r24, 0xFA	; 250
 11a:	0e 94 77 01 	call	0x2ee	; 0x2ee <TIMER0_setCompareValue>

    while (1) 
    {
		if(Timer_Counter == 125)
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 122:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 126:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_end+0x2>
 12a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_end+0x3>
 12e:	8d 37       	cpi	r24, 0x7D	; 125
 130:	91 05       	cpc	r25, r1
 132:	a1 05       	cpc	r26, r1
 134:	b1 05       	cpc	r27, r1
 136:	99 f7       	brne	.-26     	; 0x11e <main+0x5a>
		{
			TOGGLE_BIT(PORTB, DIO_PIN7);
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	80 58       	subi	r24, 0x80	; 128
 13c:	88 bb       	out	0x18, r24	; 24
			TOGGLE_BIT(PORTA, DIO_PIN4);
 13e:	9b b3       	in	r25, 0x1b	; 27
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	89 27       	eor	r24, r25
 144:	8b bb       	out	0x1b, r24	; 27
			TOGGLE_BIT(PORTA, DIO_PIN5);
 146:	9b b3       	in	r25, 0x1b	; 27
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	89 27       	eor	r24, r25
 14c:	8b bb       	out	0x1b, r24	; 27
			TOGGLE_BIT(PORTA, DIO_PIN6);
 14e:	9b b3       	in	r25, 0x1b	; 27
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	89 27       	eor	r24, r25
 154:	8b bb       	out	0x1b, r24	; 27
			Timer_Counter = 0;
 156:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
 15a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
 15e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end+0x2>
 162:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x3>
 166:	db cf       	rjmp	.-74     	; 0x11e <main+0x5a>

00000168 <__vector_16>:
	//6) Clear ADIF flag
	//-----------------------------
	CLEAR_BIT(ADCSRA, 4);
}

ISR(ADC_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	Global_ADC_Config.P_CallBack();
 18a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Global_ADC_Config+0x5>
 18e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Global_ADC_Config+0x6>
 192:	09 95       	icall
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <DIO_SetPinDir>:
	}
}

void DIO_SetPinDir(uint8_t PORTx, uint8_t PINx, uint8_t dir){
	
	if(dir){
 1b6:	44 23       	and	r20, r20
 1b8:	a1 f1       	breq	.+104    	; 0x222 <DIO_SetPinDir+0x6c>
		switch(PORTx){
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	89 f0       	breq	.+34     	; 0x1e0 <DIO_SetPinDir+0x2a>
 1be:	28 f0       	brcs	.+10     	; 0x1ca <DIO_SetPinDir+0x14>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	c9 f0       	breq	.+50     	; 0x1f6 <DIO_SetPinDir+0x40>
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	11 f1       	breq	.+68     	; 0x20c <DIO_SetPinDir+0x56>
 1c8:	08 95       	ret
			case DIO_PORTA:
			SET_BIT(DDRA, PINx);
 1ca:	2a b3       	in	r18, 0x1a	; 26
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPinDir+0x20>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPinDir+0x1c>
 1da:	82 2b       	or	r24, r18
 1dc:	8a bb       	out	0x1a, r24	; 26
			break;
 1de:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(DDRB, PINx);
 1e0:	27 b3       	in	r18, 0x17	; 23
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SetPinDir+0x36>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SetPinDir+0x32>
 1f0:	82 2b       	or	r24, r18
 1f2:	87 bb       	out	0x17, r24	; 23
			break;
 1f4:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(DDRC, PINx);
 1f6:	24 b3       	in	r18, 0x14	; 20
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinDir+0x4c>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinDir+0x48>
 206:	82 2b       	or	r24, r18
 208:	84 bb       	out	0x14, r24	; 20
			break;
 20a:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(DDRD, PINx);
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SetPinDir+0x62>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SetPinDir+0x5e>
 21c:	82 2b       	or	r24, r18
 21e:	81 bb       	out	0x11, r24	; 17
			break;
 220:	08 95       	ret
			default:
			break;
		}
	}
	else{
		switch(PORTx){
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	91 f0       	breq	.+36     	; 0x24a <DIO_SetPinDir+0x94>
 226:	28 f0       	brcs	.+10     	; 0x232 <DIO_SetPinDir+0x7c>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	d9 f0       	breq	.+54     	; 0x262 <DIO_SetPinDir+0xac>
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	29 f1       	breq	.+74     	; 0x27a <DIO_SetPinDir+0xc4>
 230:	08 95       	ret
			case DIO_PORTA:
			CLEAR_BIT(DDRA, PINx);
 232:	2a b3       	in	r18, 0x1a	; 26
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinDir+0x88>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinDir+0x84>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	8a bb       	out	0x1a, r24	; 26
			break;
 248:	08 95       	ret
			
			case DIO_PORTB:
			CLEAR_BIT(DDRB, PINx);
 24a:	27 b3       	in	r18, 0x17	; 23
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_SetPinDir+0xa0>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_SetPinDir+0x9c>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	87 bb       	out	0x17, r24	; 23
			break;
 260:	08 95       	ret
			
			case DIO_PORTC:
			CLEAR_BIT(DDRC, PINx);
 262:	24 b3       	in	r18, 0x14	; 20
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPinDir+0xb8>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPinDir+0xb4>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	84 bb       	out	0x14, r24	; 20
			break;
 278:	08 95       	ret
			
			case DIO_PORTD:
			CLEAR_BIT(DDRD, PINx);
 27a:	21 b3       	in	r18, 0x11	; 17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_SetPinDir+0xd0>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_SetPinDir+0xcc>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	81 bb       	out	0x11, r24	; 17
 290:	08 95       	ret

00000292 <TIMER0_init>:
{
	TCCR0 &= ~(0b111<<0);
}

void TIMER0_getCounterValue(uint8_t* ticks){
	*ticks = TCNT0;
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	fe 01       	movw	r30, r28
 29c:	a5 e7       	ldi	r26, 0x75	; 117
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	01 90       	ld	r0, Z+
 2a2:	0d 92       	st	X+, r0
 2a4:	8a 95       	dec	r24
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <TIMER0_init+0xe>
 2a8:	93 b7       	in	r25, 0x33	; 51
 2aa:	88 81       	ld	r24, Y
 2ac:	89 2b       	or	r24, r25
 2ae:	83 bf       	out	0x33, r24	; 51
 2b0:	88 81       	ld	r24, Y
 2b2:	88 30       	cpi	r24, 0x08	; 8
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <TIMER0_init+0x2e>
 2b6:	88 23       	and	r24, r24
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <TIMER0_init+0x2e>
 2ba:	8c b7       	in	r24, 0x3c	; 60
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	8c bf       	out	0x3c, r24	; 60
 2c0:	93 b7       	in	r25, 0x33	; 51
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	89 2b       	or	r24, r25
 2c6:	83 bf       	out	0x33, r24	; 51
 2c8:	99 b7       	in	r25, 0x39	; 57
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	89 2b       	or	r24, r25
 2ce:	89 bf       	out	0x39, r24	; 57
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	88 23       	and	r24, r24
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <TIMER0_init+0x46>
 2d6:	78 94       	sei
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	82 bf       	out	0x32, r24	; 50
 2dc:	8c 81       	ldd	r24, Y+4	; 0x04
 2de:	9d 81       	ldd	r25, Y+5	; 0x05
 2e0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <GP_IRQ_CallBack+0x1>
 2e4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <GP_IRQ_CallBack>
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <TIMER0_setCompareValue>:
}

void TIMER0_setCompareValue(uint8_t ticks){
	OCR0 = ticks;
 2ee:	8c bf       	out	0x3c, r24	; 60
 2f0:	08 95       	ret

000002f2 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
	//GP_IRQ_CallBack();
}
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	GP_IRQ_CallBack();
 328:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_IRQ_CallBack>
 32c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_IRQ_CallBack+0x1>
 330:	09 95       	icall
}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
