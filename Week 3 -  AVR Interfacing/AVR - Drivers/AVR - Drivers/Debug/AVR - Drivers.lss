
AVR - Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000312  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e17  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f5  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093e  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000640  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000786  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000353a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_10>
  2c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
TIMER0_Config_t TIMER0_Config;

int main(void)
{
	
	DIO_SetPinDir(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTA, DIO_PIN5, DIO_PIN_INPUT);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	65 e0       	ldi	r22, 0x05	; 5
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_SetPinDir>
	
	TIMER0_Config.Timer_Mode = TIMER0_MODE_Fast_PWM_Noninverting;
  a6:	e2 e6       	ldi	r30, 0x62	; 98
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	88 e6       	ldi	r24, 0x68	; 104
  ac:	80 83       	st	Z, r24
	TIMER0_Config.Clock_Source = TIMER0_PRESCALER_64;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	81 83       	std	Z+1, r24	; 0x01
	TIMER0_Config.IRQ_Enable = TIMER0_IRQ_ENABLE_NONE;
  b2:	12 82       	std	Z+2, r1	; 0x02
	TIMER0_Config.Initial_Value = 0;
  b4:	13 82       	std	Z+3, r1	; 0x03
	TIMER0_Config.P_CallBack = NULL;
  b6:	15 82       	std	Z+5, r1	; 0x05
  b8:	14 82       	std	Z+4, r1	; 0x04
	
	TIMER0_init(&TIMER0_Config);
  ba:	cf 01       	movw	r24, r30
  bc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TIMER0_init>
	

    while (1) 
    {
		PWM_varyingDutyCycle();
  c0:	0e 94 31 01 	call	0x262	; 0x262 <PWM_varyingDutyCycle>
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <main+0x2e>

000000c6 <__vector_16>:
	//6) Clear ADIF flag
	//-----------------------------
	CLEAR_BIT(ADCSRA, 4);
}

ISR(ADC_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	Global_ADC_Config.P_CallBack();
  e8:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Global_ADC_Config+0x5>
  ec:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Global_ADC_Config+0x6>
  f0:	09 95       	icall
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <DIO_SetPinDir>:
	}
}

void DIO_SetPinDir(uint8_t PORTx, uint8_t PINx, uint8_t dir){
	
	if(dir){
 114:	44 23       	and	r20, r20
 116:	a1 f1       	breq	.+104    	; 0x180 <DIO_SetPinDir+0x6c>
		switch(PORTx){
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	89 f0       	breq	.+34     	; 0x13e <DIO_SetPinDir+0x2a>
 11c:	28 f0       	brcs	.+10     	; 0x128 <DIO_SetPinDir+0x14>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	c9 f0       	breq	.+50     	; 0x154 <DIO_SetPinDir+0x40>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	11 f1       	breq	.+68     	; 0x16a <DIO_SetPinDir+0x56>
 126:	08 95       	ret
			case DIO_PORTA:
			SET_BIT(DDRA, PINx);
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SetPinDir+0x20>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SetPinDir+0x1c>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
			break;
 13c:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(DDRB, PINx);
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDir+0x36>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDir+0x32>
 14e:	82 2b       	or	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
			break;
 152:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(DDRC, PINx);
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDir+0x4c>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDir+0x48>
 164:	82 2b       	or	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
			break;
 168:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(DDRD, PINx);
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SetPinDir+0x62>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SetPinDir+0x5e>
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
			break;
 17e:	08 95       	ret
			default:
			break;
		}
	}
	else{
		switch(PORTx){
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 f0       	breq	.+36     	; 0x1a8 <DIO_SetPinDir+0x94>
 184:	28 f0       	brcs	.+10     	; 0x190 <DIO_SetPinDir+0x7c>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	d9 f0       	breq	.+54     	; 0x1c0 <DIO_SetPinDir+0xac>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	29 f1       	breq	.+74     	; 0x1d8 <DIO_SetPinDir+0xc4>
 18e:	08 95       	ret
			case DIO_PORTA:
			CLEAR_BIT(DDRA, PINx);
 190:	2a b3       	in	r18, 0x1a	; 26
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPinDir+0x88>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SetPinDir+0x84>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	8a bb       	out	0x1a, r24	; 26
			break;
 1a6:	08 95       	ret
			
			case DIO_PORTB:
			CLEAR_BIT(DDRB, PINx);
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinDir+0xa0>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinDir+0x9c>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	87 bb       	out	0x17, r24	; 23
			break;
 1be:	08 95       	ret
			
			case DIO_PORTC:
			CLEAR_BIT(DDRC, PINx);
 1c0:	24 b3       	in	r18, 0x14	; 20
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinDir+0xb8>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinDir+0xb4>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	84 bb       	out	0x14, r24	; 20
			break;
 1d6:	08 95       	ret
			
			case DIO_PORTD:
			CLEAR_BIT(DDRD, PINx);
 1d8:	21 b3       	in	r18, 0x11	; 17
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinDir+0xd0>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinDir+0xcc>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	81 bb       	out	0x11, r24	; 17
 1ee:	08 95       	ret

000001f0 <TIMER0_init>:
void TIMER0_getCounterValue(uint8_t* ticks){
	*ticks = TCNT0;
}

void TIMER0_setCompareValue(uint8_t ticks){
	OCR0 = ticks;
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	fe 01       	movw	r30, r28
 1fa:	a1 e7       	ldi	r26, 0x71	; 113
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	01 90       	ld	r0, Z+
 200:	0d 92       	st	X+, r0
 202:	8a 95       	dec	r24
 204:	e1 f7       	brne	.-8      	; 0x1fe <TIMER0_init+0xe>
 206:	93 b7       	in	r25, 0x33	; 51
 208:	88 81       	ld	r24, Y
 20a:	89 2b       	or	r24, r25
 20c:	83 bf       	out	0x33, r24	; 51
 20e:	88 81       	ld	r24, Y
 210:	88 30       	cpi	r24, 0x08	; 8
 212:	29 f0       	breq	.+10     	; 0x21e <TIMER0_init+0x2e>
 214:	88 23       	and	r24, r24
 216:	19 f0       	breq	.+6      	; 0x21e <TIMER0_init+0x2e>
 218:	8c b7       	in	r24, 0x3c	; 60
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	8c bf       	out	0x3c, r24	; 60
 21e:	93 b7       	in	r25, 0x33	; 51
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	89 2b       	or	r24, r25
 224:	83 bf       	out	0x33, r24	; 51
 226:	99 b7       	in	r25, 0x39	; 57
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	89 2b       	or	r24, r25
 22c:	89 bf       	out	0x39, r24	; 57
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	88 23       	and	r24, r24
 232:	09 f0       	breq	.+2      	; 0x236 <TIMER0_init+0x46>
 234:	78 94       	sei
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	82 bf       	out	0x32, r24	; 50
 23a:	8c 81       	ldd	r24, Y+4	; 0x04
 23c:	9d 81       	ldd	r25, Y+5	; 0x05
 23e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 242:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <PWM_setDutyCycle>:
}

void PWM_setDutyCycle(uint8_t dutyCycle)
{
	if(Global_TIMER0_Config.Timer_Mode == TIMER0_MODE_Fast_PWM_Noninverting)
 24c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <Global_TIMER0_Config>
 250:	98 36       	cpi	r25, 0x68	; 104
 252:	11 f4       	brne	.+4      	; 0x258 <PWM_setDutyCycle+0xc>
	{
		OCR0 = dutyCycle;
 254:	8c bf       	out	0x3c, r24	; 60
 256:	08 95       	ret
	}
	else if(Global_TIMER0_Config.Timer_Mode == TIMER0_MODE_Fast_PWM_Inverting)
 258:	98 37       	cpi	r25, 0x78	; 120
 25a:	11 f4       	brne	.+4      	; 0x260 <PWM_setDutyCycle+0x14>
	{
		OCR0 = (uint8_t)(255 - dutyCycle);
 25c:	80 95       	com	r24
 25e:	8c bf       	out	0x3c, r24	; 60
 260:	08 95       	ret

00000262 <PWM_varyingDutyCycle>:
	}
}

void PWM_varyingDutyCycle(){
 262:	cf 93       	push	r28
	uint8_t duty;
	for(duty = 1; duty < 254; duty++){
 264:	c1 e0       	ldi	r28, 0x01	; 1
 266:	0a c0       	rjmp	.+20     	; 0x27c <PWM_varyingDutyCycle+0x1a>
		PWM_setDutyCycle(duty);
 268:	8c 2f       	mov	r24, r28
 26a:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_setDutyCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	87 ea       	ldi	r24, 0xA7	; 167
 270:	91 e6       	ldi	r25, 0x61	; 97
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <PWM_varyingDutyCycle+0x10>
 276:	00 c0       	rjmp	.+0      	; 0x278 <PWM_varyingDutyCycle+0x16>
 278:	00 00       	nop
	}
}

void PWM_varyingDutyCycle(){
	uint8_t duty;
	for(duty = 1; duty < 254; duty++){
 27a:	cf 5f       	subi	r28, 0xFF	; 255
 27c:	ce 3f       	cpi	r28, 0xFE	; 254
 27e:	a0 f3       	brcs	.-24     	; 0x268 <PWM_varyingDutyCycle+0x6>
 280:	83 ed       	ldi	r24, 0xD3	; 211
 282:	90 e3       	ldi	r25, 0x30	; 48
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <PWM_varyingDutyCycle+0x22>
 288:	00 c0       	rjmp	.+0      	; 0x28a <PWM_varyingDutyCycle+0x28>
 28a:	00 00       	nop
		PWM_setDutyCycle(duty);
		_delay_ms(100);
	}
	_delay_ms(50);
	for(duty = 254; duty >= 1; duty--){
 28c:	ce ef       	ldi	r28, 0xFE	; 254
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <PWM_varyingDutyCycle+0x42>
		PWM_setDutyCycle(duty);
 290:	8c 2f       	mov	r24, r28
 292:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_setDutyCycle>
 296:	87 ea       	ldi	r24, 0xA7	; 167
 298:	91 e6       	ldi	r25, 0x61	; 97
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <PWM_varyingDutyCycle+0x38>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <PWM_varyingDutyCycle+0x3e>
 2a0:	00 00       	nop
	for(duty = 1; duty < 254; duty++){
		PWM_setDutyCycle(duty);
		_delay_ms(100);
	}
	_delay_ms(50);
	for(duty = 254; duty >= 1; duty--){
 2a2:	c1 50       	subi	r28, 0x01	; 1
 2a4:	c1 11       	cpse	r28, r1
 2a6:	f4 cf       	rjmp	.-24     	; 0x290 <PWM_varyingDutyCycle+0x2e>
		PWM_setDutyCycle(duty);
		_delay_ms(100);
	}
}
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
	//GP_IRQ_CallBack();
}
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	GP_IRQ_CallBack();
 2e2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	09 95       	icall
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
