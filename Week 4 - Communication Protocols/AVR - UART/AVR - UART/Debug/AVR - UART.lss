
AVR - UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800060  00800060  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f4  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e0  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_13>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 37       	cpi	r26, 0x71	; 113
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  74:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_CallBack>:
volatile uint8_t UART_flag = 0;

void UART_CallBack(uint8_t data){
	
	static uint32_t bufferIndex = 0;
	buffer[bufferIndex] = data;
  7c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  84:	f9 01       	movw	r30, r18
  86:	e9 59       	subi	r30, 0x99	; 153
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	80 83       	st	Z, r24
	
	if(bufferIndex == (sizeof(buffer) / sizeof(buffer[0]) - 1) || 
  8c:	29 30       	cpi	r18, 0x09	; 9
  8e:	31 05       	cpc	r19, r1
  90:	61 f0       	breq	.+24     	; 0xaa <UART_CallBack+0x2e>
	   buffer[bufferIndex] == '\r' || 
  92:	f9 01       	movw	r30, r18
  94:	e9 59       	subi	r30, 0x99	; 153
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	80 81       	ld	r24, Z
void UART_CallBack(uint8_t data){
	
	static uint32_t bufferIndex = 0;
	buffer[bufferIndex] = data;
	
	if(bufferIndex == (sizeof(buffer) / sizeof(buffer[0]) - 1) || 
  9a:	8d 30       	cpi	r24, 0x0D	; 13
  9c:	31 f0       	breq	.+12     	; 0xaa <UART_CallBack+0x2e>
	   buffer[bufferIndex] == '\r' || 
	   buffer[bufferIndex] == '\n' ){
  9e:	f9 01       	movw	r30, r18
  a0:	e9 59       	subi	r30, 0x99	; 153
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 81       	ld	r24, Z
	
	static uint32_t bufferIndex = 0;
	buffer[bufferIndex] = data;
	
	if(bufferIndex == (sizeof(buffer) / sizeof(buffer[0]) - 1) || 
	   buffer[bufferIndex] == '\r' || 
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	61 f4       	brne	.+24     	; 0xc2 <UART_CallBack+0x46>
	   buffer[bufferIndex] == '\n' ){
		buffer[bufferIndex] = '\0';
  aa:	f9 01       	movw	r30, r18
  ac:	e9 59       	subi	r30, 0x99	; 153
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	10 82       	st	Z, r1
		bufferIndex = 0;
  b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		UART_flag = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <UART_flag>
  c0:	08 95       	ret
	}
	else{
		bufferIndex++;
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ca:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	08 95       	ret

000000d0 <main>:
	}
}

int main(void)
{
    UART_init();
  d0:	0e 94 88 00 	call	0x110	; 0x110 <UART_init>
	UART_setBaudRate(9600);
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	95 e2       	ldi	r25, 0x25	; 37
  d8:	0e 94 a2 00 	call	0x144	; 0x144 <UART_setBaudRate>
	UART_RegisterCallBack(0, UART_CallBack);
  dc:	6e e3       	ldi	r22, 0x3E	; 62
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_RegisterCallBack>
	Global_Interrupt_Enable();
  e6:	0e 94 84 00 	call	0x108	; 0x108 <Global_Interrupt_Enable>
    while (1) 
    {
		UART_RecieveString(buffer);
  ea:	87 e6       	ldi	r24, 0x67	; 103
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 ca 00 	call	0x194	; 0x194 <UART_RecieveString>
		UART_TransmitString(buffer);
  f2:	87 e6       	ldi	r24, 0x67	; 103
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_TransmitString>
		UART_TransmitByte('\r');
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	0e 94 9a 00 	call	0x134	; 0x134 <UART_TransmitByte>
		UART_TransmitByte('\n');
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	0e 94 9a 00 	call	0x134	; 0x134 <UART_TransmitByte>
 106:	f1 cf       	rjmp	.-30     	; 0xea <main+0x1a>

00000108 <Global_Interrupt_Enable>:
 */ 

#include "Global_Interrupt.h"

void Global_Interrupt_Enable(){
	SET_BIT(SREG, 7);
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <UART_init>:
	return UDR;
}

uint8_t UART_getUDRValue(void){
	return UDR;
}
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8a b9       	out	0x0a, r24	; 10
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	8a b9       	out	0x0a, r24	; 10
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	8a b9       	out	0x0a, r24	; 10
 122:	8a b1       	in	r24, 0x0a	; 10
 124:	8f 7e       	andi	r24, 0xEF	; 239
 126:	8a b9       	out	0x0a, r24	; 10
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	86 e8       	ldi	r24, 0x86	; 134
 130:	80 bd       	out	0x20, r24	; 32
 132:	08 95       	ret

00000134 <UART_TransmitByte>:
 134:	5d 9b       	sbis	0x0b, 5	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <UART_TransmitByte>
 138:	8c b9       	out	0x0c, r24	; 12
 13a:	08 95       	ret

0000013c <UART_RecieveByte>:
 13c:	5f 9b       	sbis	0x0b, 7	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <UART_RecieveByte>
 140:	8c b1       	in	r24, 0x0c	; 12
 142:	08 95       	ret

00000144 <UART_setBaudRate>:

void UART_setBaudRate(uint32_t baudRate){
	uint32_t BR = 8000000 / baudRate;
 144:	9c 01       	movw	r18, r24
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	72 e1       	ldi	r23, 0x12	; 18
 14e:	8a e7       	ldi	r24, 0x7A	; 122
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 3a 01 	call	0x274	; 0x274 <__divmodsi4>
	BR /= 16;
 156:	32 95       	swap	r19
 158:	22 95       	swap	r18
 15a:	2f 70       	andi	r18, 0x0F	; 15
 15c:	23 27       	eor	r18, r19
 15e:	3f 70       	andi	r19, 0x0F	; 15
 160:	23 27       	eor	r18, r19
	BR -= 1;
 162:	21 50       	subi	r18, 0x01	; 1
 164:	31 09       	sbc	r19, r1
	if(BR < 255){
 166:	2f 3f       	cpi	r18, 0xFF	; 255
 168:	31 05       	cpc	r19, r1
 16a:	10 f4       	brcc	.+4      	; 0x170 <UART_setBaudRate+0x2c>
		UBRRL = (uint8_t)(BR);
 16c:	29 b9       	out	0x09, r18	; 9
 16e:	08 95       	ret
	}
	else{
		UBRRL = (uint8_t)(BR);
 170:	29 b9       	out	0x09, r18	; 9
		UBRRH = 0x0F & (BR >> 8);
 172:	83 2f       	mov	r24, r19
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	80 bd       	out	0x20, r24	; 32
 178:	08 95       	ret

0000017a <UART_TransmitString>:
	}
}

void UART_TransmitString(const uint8_t *data){
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
	while(*data != '\0'){
 180:	03 c0       	rjmp	.+6      	; 0x188 <UART_TransmitString+0xe>
		UART_TransmitByte(*data);
 182:	0e 94 9a 00 	call	0x134	; 0x134 <UART_TransmitByte>
		data++;
 186:	21 96       	adiw	r28, 0x01	; 1
		UBRRH = 0x0F & (BR >> 8);
	}
}

void UART_TransmitString(const uint8_t *data){
	while(*data != '\0'){
 188:	88 81       	ld	r24, Y
 18a:	81 11       	cpse	r24, r1
 18c:	fa cf       	rjmp	.-12     	; 0x182 <UART_TransmitString+0x8>
		UART_TransmitByte(*data);
		data++;
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <UART_RecieveString>:

void UART_RecieveString(uint8_t *data){
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
	do{
		*data = UART_RecieveByte();
 19a:	0e 94 9e 00 	call	0x13c	; 0x13c <UART_RecieveByte>
 19e:	89 93       	st	Y+, r24
		data++;
	}
	while((*(data - 1) != '\r'));
 1a0:	8d 30       	cpi	r24, 0x0D	; 13
 1a2:	d9 f7       	brne	.-10     	; 0x19a <UART_RecieveString+0x6>
	*(data - 1) = '\0';
 1a4:	21 97       	sbiw	r28, 0x01	; 1
 1a6:	18 82       	st	Y, r1
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <UART_RegisterCallBack>:

void UART_RegisterCallBack(uint8_t UART_Interrupt, void (*fptr)(uint8_t)){
	switch(UART_Interrupt){
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <UART_RegisterCallBack+0xa>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <UART_RegisterCallBack+0x14>
 1b6:	08 95       	ret
		case 0:
			UART_RX_COMPLETE_CallBack = fptr;
 1b8:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <UART_RX_COMPLETE_CallBack+0x1>
 1bc:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <UART_RX_COMPLETE_CallBack>
			break;
 1c0:	08 95       	ret
		case 1:
			UART_TX_COMPLETE_CallBack = fptr;
 1c2:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <UART_TX_COMPLETE_CallBack+0x1>
 1c6:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <UART_TX_COMPLETE_CallBack>
 1ca:	08 95       	ret

000001cc <__vector_13>:
			break;
	}
}

void __vector_13(void) __attribute__((signal));
void __vector_13(void){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	if(UART_RX_COMPLETE_CallBack != NULL){
 1ee:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <UART_RX_COMPLETE_CallBack>
 1f2:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <UART_RX_COMPLETE_CallBack+0x1>
 1f6:	30 97       	sbiw	r30, 0x00	; 0
 1f8:	11 f0       	breq	.+4      	; 0x1fe <__vector_13+0x32>
		UART_RX_COMPLETE_CallBack(UDR);
 1fa:	8c b1       	in	r24, 0x0c	; 12
 1fc:	09 95       	icall
	}
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	if(UART_TX_COMPLETE_CallBack != NULL){
 242:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <UART_TX_COMPLETE_CallBack>
 246:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <UART_TX_COMPLETE_CallBack+0x1>
 24a:	30 97       	sbiw	r30, 0x00	; 0
 24c:	11 f0       	breq	.+4      	; 0x252 <__vector_14+0x32>
		UART_TX_COMPLETE_CallBack(UDR);
 24e:	8c b1       	in	r24, 0x0c	; 12
 250:	09 95       	icall
	}
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__divmodsi4>:
 274:	05 2e       	mov	r0, r21
 276:	97 fb       	bst	r25, 7
 278:	1e f4       	brtc	.+6      	; 0x280 <__divmodsi4+0xc>
 27a:	00 94       	com	r0
 27c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__negsi2>
 280:	57 fd       	sbrc	r21, 7
 282:	07 d0       	rcall	.+14     	; 0x292 <__divmodsi4_neg2>
 284:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__udivmodsi4>
 288:	07 fc       	sbrc	r0, 7
 28a:	03 d0       	rcall	.+6      	; 0x292 <__divmodsi4_neg2>
 28c:	4e f4       	brtc	.+18     	; 0x2a0 <__divmodsi4_exit>
 28e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__negsi2>

00000292 <__divmodsi4_neg2>:
 292:	50 95       	com	r21
 294:	40 95       	com	r20
 296:	30 95       	com	r19
 298:	21 95       	neg	r18
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	4f 4f       	sbci	r20, 0xFF	; 255
 29e:	5f 4f       	sbci	r21, 0xFF	; 255

000002a0 <__divmodsi4_exit>:
 2a0:	08 95       	ret

000002a2 <__negsi2>:
 2a2:	90 95       	com	r25
 2a4:	80 95       	com	r24
 2a6:	70 95       	com	r23
 2a8:	61 95       	neg	r22
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	8f 4f       	sbci	r24, 0xFF	; 255
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	08 95       	ret

000002b2 <__udivmodsi4>:
 2b2:	a1 e2       	ldi	r26, 0x21	; 33
 2b4:	1a 2e       	mov	r1, r26
 2b6:	aa 1b       	sub	r26, r26
 2b8:	bb 1b       	sub	r27, r27
 2ba:	fd 01       	movw	r30, r26
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__udivmodsi4_ep>

000002be <__udivmodsi4_loop>:
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	ee 1f       	adc	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	a2 17       	cp	r26, r18
 2c8:	b3 07       	cpc	r27, r19
 2ca:	e4 07       	cpc	r30, r20
 2cc:	f5 07       	cpc	r31, r21
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <__udivmodsi4_ep>
 2d0:	a2 1b       	sub	r26, r18
 2d2:	b3 0b       	sbc	r27, r19
 2d4:	e4 0b       	sbc	r30, r20
 2d6:	f5 0b       	sbc	r31, r21

000002d8 <__udivmodsi4_ep>:
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a 94       	dec	r1
 2e2:	69 f7       	brne	.-38     	; 0x2be <__udivmodsi4_loop>
 2e4:	60 95       	com	r22
 2e6:	70 95       	com	r23
 2e8:	80 95       	com	r24
 2ea:	90 95       	com	r25
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	bd 01       	movw	r22, r26
 2f2:	cf 01       	movw	r24, r30
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
