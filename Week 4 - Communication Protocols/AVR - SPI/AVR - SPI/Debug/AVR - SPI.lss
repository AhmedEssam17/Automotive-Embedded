
AVR - SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a28  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000551  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000484  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000024ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint8_t x = 0;

int main(void)
{
	
	SPI_init();
  7c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <SPI_init>
	
	DIO_SetPinDir(DIO_PORTA, DIO_PIN5, DIO_PIN_OUTPUT);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	65 e0       	ldi	r22, 0x05	; 5
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTA, DIO_PIN6, DIO_PIN_OUTPUT);
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	66 e0       	ldi	r22, 0x06	; 6
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT);
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	65 e0       	ldi	r22, 0x05	; 5
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN6, DIO_PIN_INPUT);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	66 e0       	ldi	r22, 0x06	; 6
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	67 e0       	ldi	r22, 0x07	; 7
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	
    while (1) 
    {
		x = SPI_Transceive('X');
  b2:	88 e5       	ldi	r24, 0x58	; 88
  b4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <SPI_Transceive>
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(x == 'X'){
  bc:	88 35       	cpi	r24, 0x58	; 88
  be:	59 f4       	brne	.+22     	; 0xd6 <main+0x5a>
			DIO_SetPinVal(DIO_PORTA, DIO_PIN6, DIO_PIN_LOW);
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	66 e0       	ldi	r22, 0x06	; 6
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_SetPinVal>
			DIO_SetPinVal(DIO_PORTA, DIO_PIN5, DIO_PIN_HIGH);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	65 e0       	ldi	r22, 0x05	; 5
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_SetPinVal>
  d4:	ee cf       	rjmp	.-36     	; 0xb2 <main+0x36>
		}
		else{
			DIO_SetPinVal(DIO_PORTA, DIO_PIN5, DIO_PIN_LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_SetPinVal>
			DIO_SetPinVal(DIO_PORTA, DIO_PIN6, DIO_PIN_HIGH);
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	66 e0       	ldi	r22, 0x06	; 6
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_SetPinVal>
  ea:	e3 cf       	rjmp	.-58     	; 0xb2 <main+0x36>

000000ec <DIO_SetPinDir>:
		case DIO_PORTC:
		PORTC = value;
		break;
		
		case DIO_PORTD:
		PORTD = value;
  ec:	44 23       	and	r20, r20
  ee:	a1 f1       	breq	.+104    	; 0x158 <DIO_SetPinDir+0x6c>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	89 f0       	breq	.+34     	; 0x116 <DIO_SetPinDir+0x2a>
  f4:	28 f0       	brcs	.+10     	; 0x100 <DIO_SetPinDir+0x14>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	c9 f0       	breq	.+50     	; 0x12c <DIO_SetPinDir+0x40>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	11 f1       	breq	.+68     	; 0x142 <DIO_SetPinDir+0x56>
  fe:	08 95       	ret
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_SetPinDir+0x20>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_SetPinDir+0x1c>
 110:	82 2b       	or	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinDir+0x36>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinDir+0x32>
 126:	82 2b       	or	r24, r18
 128:	87 bb       	out	0x17, r24	; 23
 12a:	08 95       	ret
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0x4c>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0x48>
 13c:	82 2b       	or	r24, r18
 13e:	84 bb       	out	0x14, r24	; 20
 140:	08 95       	ret
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_SetPinDir+0x62>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_SetPinDir+0x5e>
 152:	82 2b       	or	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_SetPinDir+0x94>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinDir+0x7c>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_SetPinDir+0xac>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_SetPinDir+0xc4>
 166:	08 95       	ret
 168:	2a b3       	in	r18, 0x1a	; 26
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinDir+0x88>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinDir+0x84>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	08 95       	ret
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDir+0xa0>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDir+0x9c>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	87 bb       	out	0x17, r24	; 23
 196:	08 95       	ret
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDir+0xb8>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDir+0xb4>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	08 95       	ret
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPinDir+0xd0>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPinDir+0xcc>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	81 bb       	out	0x11, r24	; 17
 1c6:	08 95       	ret

000001c8 <DIO_SetPinVal>:
	}
}

void DIO_SetPinVal(uint8_t PORTx, uint8_t PINx, uint8_t value){
	
	if(value){
 1c8:	44 23       	and	r20, r20
 1ca:	a1 f1       	breq	.+104    	; 0x234 <DIO_SetPinVal+0x6c>
		switch(PORTx){
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	89 f0       	breq	.+34     	; 0x1f2 <DIO_SetPinVal+0x2a>
 1d0:	28 f0       	brcs	.+10     	; 0x1dc <DIO_SetPinVal+0x14>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	c9 f0       	breq	.+50     	; 0x208 <DIO_SetPinVal+0x40>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	11 f1       	breq	.+68     	; 0x21e <DIO_SetPinVal+0x56>
 1da:	08 95       	ret
			case DIO_PORTA:
			SET_BIT(PORTA, PINx);
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinVal+0x20>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinVal+0x1c>
 1ec:	82 2b       	or	r24, r18
 1ee:	8b bb       	out	0x1b, r24	; 27
			break;
 1f0:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB, PINx);
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinVal+0x36>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinVal+0x32>
 202:	82 2b       	or	r24, r18
 204:	88 bb       	out	0x18, r24	; 24
			break;
 206:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC, PINx);
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPinVal+0x4c>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPinVal+0x48>
 218:	82 2b       	or	r24, r18
 21a:	85 bb       	out	0x15, r24	; 21
			break;
 21c:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD, PINx);
 21e:	22 b3       	in	r18, 0x12	; 18
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinVal+0x62>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinVal+0x5e>
 22e:	82 2b       	or	r24, r18
 230:	82 bb       	out	0x12, r24	; 18
			break;
 232:	08 95       	ret
			default:
			break;
		}
	}
	else{
		switch(PORTx){
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 f0       	breq	.+36     	; 0x25c <DIO_SetPinVal+0x94>
 238:	28 f0       	brcs	.+10     	; 0x244 <DIO_SetPinVal+0x7c>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	d9 f0       	breq	.+54     	; 0x274 <DIO_SetPinVal+0xac>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	29 f1       	breq	.+74     	; 0x28c <DIO_SetPinVal+0xc4>
 242:	08 95       	ret
			case DIO_PORTA:
			CLEAR_BIT(PORTA, PINx);
 244:	2b b3       	in	r18, 0x1b	; 27
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_SetPinVal+0x88>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_SetPinVal+0x84>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	8b bb       	out	0x1b, r24	; 27
			break;
 25a:	08 95       	ret
			
			case DIO_PORTB:
			CLEAR_BIT(PORTB, PINx);
 25c:	28 b3       	in	r18, 0x18	; 24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_SetPinVal+0xa0>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_SetPinVal+0x9c>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	88 bb       	out	0x18, r24	; 24
			break;
 272:	08 95       	ret
			
			case DIO_PORTC:
			CLEAR_BIT(PORTC, PINx);
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_SetPinVal+0xb8>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_SetPinVal+0xb4>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	85 bb       	out	0x15, r24	; 21
			break;
 28a:	08 95       	ret
			
			case DIO_PORTD:
			CLEAR_BIT(PORTD, PINx);
 28c:	22 b3       	in	r18, 0x12	; 18
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinVal+0xd0>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinVal+0xcc>
 29c:	80 95       	com	r24
 29e:	82 23       	and	r24, r18
 2a0:	82 bb       	out	0x12, r24	; 18
 2a2:	08 95       	ret

000002a4 <SPI_init>:
	
	return SPDR;
}

void SPI_setCallBack(void(*fptr)(void)){
	SPI_CallBack = fptr;
 2a4:	8e b1       	in	r24, 0x0e	; 14
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	8e b9       	out	0x0e, r24	; 14
 2aa:	81 ef       	ldi	r24, 0xF1	; 241
 2ac:	8d b9       	out	0x0d, r24	; 13
 2ae:	08 95       	ret

000002b0 <SPI_Transceive>:
 2b0:	8f b9       	out	0x0f, r24	; 15
 2b2:	77 9b       	sbis	0x0e, 7	; 14
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <SPI_Transceive+0x2>
 2b6:	8f b1       	in	r24, 0x0f	; 15
 2b8:	08 95       	ret

000002ba <__vector_12>:
}

void __vector_12(void) __attribute((signal));
void __vector_12(void)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	if(SPI_CallBack != NULL)
 2dc:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <SPI_CallBack>
 2e0:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <SPI_CallBack+0x1>
 2e4:	30 97       	sbiw	r30, 0x00	; 0
 2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_12+0x30>
	{
		SPI_CallBack();
 2e8:	09 95       	icall
	}
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
