
EXTI - Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000900  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a30  08000a30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a3c  08000a3c  00010a44  2**0
                  CONTENTS
  4 .ARM          00000000  08000a3c  08000a3c  00010a44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a3c  08000a44  00010a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a40  08000a40  00010a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000000  08000a44  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000a44  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a44  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cff  00000000  00000000  00010a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000450  00000000  00000000  0001176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00011bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001925  00000000  00000000  00011ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000892  00000000  00000000  0001380d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000613a  00000000  00000000  0001409f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001a1d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000056c  00000000  00000000  0001a254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a18 	.word	0x08000a18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a18 	.word	0x08000a18

08000170 <NVIC_Enable>:

//====================================================================
//						Generic Functions
//====================================================================

void NVIC_Enable(uint16_t IRQ){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	NVIC_EnableInterrupt((uint8_t)IRQ);
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	4618      	mov	r0, r3
 8000180:	f000 fb0a 	bl	8000798 <NVIC_EnableInterrupt>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <NVIC_Disable>:

void NVIC_Disable(uint16_t IRQ){
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	80fb      	strh	r3, [r7, #6]
	NVIC_DisableInterrupt((uint8_t)IRQ);
 8000196:	88fb      	ldrh	r3, [r7, #6]
 8000198:	b2db      	uxtb	r3, r3
 800019a:	4618      	mov	r0, r3
 800019c:	f000 fb1e 	bl	80007dc <NVIC_DisableInterrupt>
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <Configure_EXTI>:

void Configure_EXTI(EXTI_PinConfig_t *EXTI_Config){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	//-----------------------------
	//1) Configure GPIO to be AF Input >> Floating Input
	//-----------------------------
	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	891b      	ldrh	r3, [r3, #8]
 80001b4:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001b6:	2302      	movs	r3, #2
 80001b8:	817b      	strh	r3, [r7, #10]
	GPIO_init(EXTI_Config->EXTI_PIN.GPIOx, &PinConfig);
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	f107 0208 	add.w	r2, r7, #8
 80001c2:	4611      	mov	r1, r2
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fa56 	bl	8000676 <GPIO_init>

	//-----------------------------
	//2) Route AFIO to Corresponding EXTI Input Line
	//-----------------------------
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineX / 4;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	089b      	lsrs	r3, r3, #2
 80001d0:	b29b      	uxth	r3, r3
 80001d2:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineX % 4) * 4;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	f003 0303 	and.w	r3, r3, #3
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	73bb      	strb	r3, [r7, #14]

	//Reset then Set AFIO->EXTICR Register
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 80001e4:	4a5e      	ldr	r2, [pc, #376]	; (8000360 <Configure_EXTI+0x1b8>)
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
 80001e8:	3302      	adds	r3, #2
 80001ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	210f      	movs	r1, #15
 80001f2:	fa01 f303 	lsl.w	r3, r1, r3
 80001f6:	43db      	mvns	r3, r3
 80001f8:	4618      	mov	r0, r3
 80001fa:	4959      	ldr	r1, [pc, #356]	; (8000360 <Configure_EXTI+0x1b8>)
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	4002      	ands	r2, r0
 8000200:	3302      	adds	r3, #2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIOx_Mapping(EXTI_Config->EXTI_PIN.GPIOx) & 0xF) << AFIO_EXTICR_Position);
 8000206:	4a56      	ldr	r2, [pc, #344]	; (8000360 <Configure_EXTI+0x1b8>)
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	3302      	adds	r3, #2
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4953      	ldr	r1, [pc, #332]	; (8000364 <Configure_EXTI+0x1bc>)
 8000216:	428b      	cmp	r3, r1
 8000218:	d00f      	beq.n	800023a <Configure_EXTI+0x92>
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	4952      	ldr	r1, [pc, #328]	; (8000368 <Configure_EXTI+0x1c0>)
 8000220:	428b      	cmp	r3, r1
 8000222:	d008      	beq.n	8000236 <Configure_EXTI+0x8e>
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	4950      	ldr	r1, [pc, #320]	; (800036c <Configure_EXTI+0x1c4>)
 800022a:	428b      	cmp	r3, r1
 800022c:	d101      	bne.n	8000232 <Configure_EXTI+0x8a>
 800022e:	2302      	movs	r3, #2
 8000230:	e004      	b.n	800023c <Configure_EXTI+0x94>
 8000232:	2300      	movs	r3, #0
 8000234:	e002      	b.n	800023c <Configure_EXTI+0x94>
 8000236:	2301      	movs	r3, #1
 8000238:	e000      	b.n	800023c <Configure_EXTI+0x94>
 800023a:	2300      	movs	r3, #0
 800023c:	7bb9      	ldrb	r1, [r7, #14]
 800023e:	408b      	lsls	r3, r1
 8000240:	4618      	mov	r0, r3
 8000242:	4947      	ldr	r1, [pc, #284]	; (8000360 <Configure_EXTI+0x1b8>)
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	4302      	orrs	r2, r0
 8000248:	3302      	adds	r3, #2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//-----------------------------
	//3) Set Rising/Falling Trigger Case
	//-----------------------------
	//Reset then Set EXTI->RTSR and EXTI->FTSR
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 800024e:	4b48      	ldr	r3, [pc, #288]	; (8000370 <Configure_EXTI+0x1c8>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	8812      	ldrh	r2, [r2, #0]
 8000256:	4611      	mov	r1, r2
 8000258:	2201      	movs	r2, #1
 800025a:	408a      	lsls	r2, r1
 800025c:	43d2      	mvns	r2, r2
 800025e:	4611      	mov	r1, r2
 8000260:	4a43      	ldr	r2, [pc, #268]	; (8000370 <Configure_EXTI+0x1c8>)
 8000262:	400b      	ands	r3, r1
 8000264:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000266:	4b42      	ldr	r3, [pc, #264]	; (8000370 <Configure_EXTI+0x1c8>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	8812      	ldrh	r2, [r2, #0]
 800026e:	4611      	mov	r1, r2
 8000270:	2201      	movs	r2, #1
 8000272:	408a      	lsls	r2, r1
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a3d      	ldr	r2, [pc, #244]	; (8000370 <Configure_EXTI+0x1c8>)
 800027a:	400b      	ands	r3, r1
 800027c:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger == EXTI_Trigger_Rising){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	7b1b      	ldrb	r3, [r3, #12]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d10b      	bne.n	800029e <Configure_EXTI+0xf6>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000286:	4b3a      	ldr	r3, [pc, #232]	; (8000370 <Configure_EXTI+0x1c8>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	8812      	ldrh	r2, [r2, #0]
 800028e:	4611      	mov	r1, r2
 8000290:	2201      	movs	r2, #1
 8000292:	408a      	lsls	r2, r1
 8000294:	4611      	mov	r1, r2
 8000296:	4a36      	ldr	r2, [pc, #216]	; (8000370 <Configure_EXTI+0x1c8>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6093      	str	r3, [r2, #8]
 800029c:	e029      	b.n	80002f2 <Configure_EXTI+0x14a>
	}
	else if(EXTI_Config->Trigger == EXTI_Trigger_Falling){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	7b1b      	ldrb	r3, [r3, #12]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d10b      	bne.n	80002be <Configure_EXTI+0x116>
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 80002a6:	4b32      	ldr	r3, [pc, #200]	; (8000370 <Configure_EXTI+0x1c8>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	8812      	ldrh	r2, [r2, #0]
 80002ae:	4611      	mov	r1, r2
 80002b0:	2201      	movs	r2, #1
 80002b2:	408a      	lsls	r2, r1
 80002b4:	4611      	mov	r1, r2
 80002b6:	4a2e      	ldr	r2, [pc, #184]	; (8000370 <Configure_EXTI+0x1c8>)
 80002b8:	430b      	orrs	r3, r1
 80002ba:	60d3      	str	r3, [r2, #12]
 80002bc:	e019      	b.n	80002f2 <Configure_EXTI+0x14a>
	}
	else if(EXTI_Config->Trigger == EXTI_Trigger_RisingAndFalling){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	7b1b      	ldrb	r3, [r3, #12]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d115      	bne.n	80002f2 <Configure_EXTI+0x14a>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 80002c6:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <Configure_EXTI+0x1c8>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	8812      	ldrh	r2, [r2, #0]
 80002ce:	4611      	mov	r1, r2
 80002d0:	2201      	movs	r2, #1
 80002d2:	408a      	lsls	r2, r1
 80002d4:	4611      	mov	r1, r2
 80002d6:	4a26      	ldr	r2, [pc, #152]	; (8000370 <Configure_EXTI+0x1c8>)
 80002d8:	430b      	orrs	r3, r1
 80002da:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <Configure_EXTI+0x1c8>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	8812      	ldrh	r2, [r2, #0]
 80002e4:	4611      	mov	r1, r2
 80002e6:	2201      	movs	r2, #1
 80002e8:	408a      	lsls	r2, r1
 80002ea:	4611      	mov	r1, r2
 80002ec:	4a20      	ldr	r2, [pc, #128]	; (8000370 <Configure_EXTI+0x1c8>)
 80002ee:	430b      	orrs	r3, r1
 80002f0:	60d3      	str	r3, [r2, #12]
	}

	//-----------------------------
	//4) Set IRQ CallBack Function
	//-----------------------------
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineX] = EXTI_Config->P_IRQ_CallBack;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	4619      	mov	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <Configure_EXTI+0x1cc>)
 80002fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//-----------------------------
	//5) Enable/Disable EXTIxNVIC IRQ Mask
	//-----------------------------
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	7b5b      	ldrb	r3, [r3, #13]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d110      	bne.n	800032c <Configure_EXTI+0x184>
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <Configure_EXTI+0x1c8>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	8812      	ldrh	r2, [r2, #0]
 8000312:	4611      	mov	r1, r2
 8000314:	2201      	movs	r2, #1
 8000316:	408a      	lsls	r2, r1
 8000318:	4611      	mov	r1, r2
 800031a:	4a15      	ldr	r2, [pc, #84]	; (8000370 <Configure_EXTI+0x1c8>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff23 	bl	8000170 <NVIC_Enable>
	}
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable){
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineX);
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineX);
	}
}
 800032a:	e014      	b.n	8000356 <Configure_EXTI+0x1ae>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7b5b      	ldrb	r3, [r3, #13]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d110      	bne.n	8000356 <Configure_EXTI+0x1ae>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <Configure_EXTI+0x1c8>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	8812      	ldrh	r2, [r2, #0]
 800033c:	4611      	mov	r1, r2
 800033e:	2201      	movs	r2, #1
 8000340:	408a      	lsls	r2, r1
 8000342:	43d2      	mvns	r2, r2
 8000344:	4611      	mov	r1, r2
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <Configure_EXTI+0x1c8>)
 8000348:	400b      	ands	r3, r1
 800034a:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineX);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff1b 	bl	800018c <NVIC_Disable>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010000 	.word	0x40010000
 8000364:	40010800 	.word	0x40010800
 8000368:	40010c00 	.word	0x40010c00
 800036c:	40011000 	.word	0x40011000
 8000370:	40010400 	.word	0x40010400
 8000374:	20000020 	.word	0x20000020

08000378 <MCAL_EXTI_init>:
 * 					 STM32F103C6 MCU has GPIO A..E but LQFP48 only has the following:
 * 					 GPIOA & GPIOB Fully included
 * 					 GPIOC & GPIOD Partially included
 * 					 GPIOE not included
 */
void MCAL_EXTI_init(EXTI_PinConfig_t *EXTI_Config){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	Configure_EXTI(EXTI_Config);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ff11 	bl	80001a8 <Configure_EXTI>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <EXTI0_IRQHandler>:

//====================================================================
//							ISR Functions
//====================================================================

void EXTI0_IRQHandler(void){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI0_IRQHandler+0x1c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI0_IRQHandler+0x1c>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <EXTI0_IRQHandler+0x20>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4798      	blx	r3
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010400 	.word	0x40010400
 80003b0:	20000020 	.word	0x20000020

080003b4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <EXTI1_IRQHandler+0x1c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <EXTI1_IRQHandler+0x1c>)
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <EXTI1_IRQHandler+0x20>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4798      	blx	r3
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40010400 	.word	0x40010400
 80003d4:	20000020 	.word	0x20000020

080003d8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <EXTI2_IRQHandler+0x1c>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <EXTI2_IRQHandler+0x1c>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <EXTI2_IRQHandler+0x20>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4798      	blx	r3
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010400 	.word	0x40010400
 80003f8:	20000020 	.word	0x20000020

080003fc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI3_IRQHandler+0x1c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI3_IRQHandler+0x1c>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <EXTI3_IRQHandler+0x20>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	4798      	blx	r3
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010400 	.word	0x40010400
 800041c:	20000020 	.word	0x20000020

08000420 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI4_IRQHandler+0x1c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI4_IRQHandler+0x1c>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <EXTI4_IRQHandler+0x20>)
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	4798      	blx	r3
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010400 	.word	0x40010400
 8000440:	20000020 	.word	0x20000020

08000444 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){
 8000448:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= (1<<5);
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <EXTI9_5_IRQHandler+0xa4>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<6){
 8000466:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (1<<6);
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <EXTI9_5_IRQHandler+0xa4>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<7){
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (1<<7);
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 8000496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <EXTI9_5_IRQHandler+0xa4>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<8){
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (1<<8);
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 80004b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b8:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <EXTI9_5_IRQHandler+0xa4>)
 80004bc:	6a1b      	ldr	r3, [r3, #32]
 80004be:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<9){
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d008      	beq.n	80004de <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (1<<9);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <EXTI9_5_IRQHandler+0xa0>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI9_5_IRQHandler+0xa4>)
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	4798      	blx	r3
	}
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010400 	.word	0x40010400
 80004e8:	20000020 	.word	0x20000020

080004ec <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d008      	beq.n	800050e <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= (1<<10);
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <EXTI15_10_IRQHandler+0xc0>)
 800050a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800050c:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<11){
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000516:	2b00      	cmp	r3, #0
 8000518:	d008      	beq.n	800052c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (1<<11);
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000524:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <EXTI15_10_IRQHandler+0xc0>)
 8000528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052a:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<12){
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (1<<12);
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800053e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000542:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <EXTI15_10_IRQHandler+0xc0>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<13){
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000552:	2b00      	cmp	r3, #0
 8000554:	d008      	beq.n	8000568 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (1<<13);
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800055c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000560:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <EXTI15_10_IRQHandler+0xc0>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<14){
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (1<<14);
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <EXTI15_10_IRQHandler+0xc0>)
 8000582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000584:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<15){
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (1<<15);
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI15_10_IRQHandler+0xbc>)
 8000598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800059c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI15_10_IRQHandler+0xc0>)
 80005a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005a2:	4798      	blx	r3
	}
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000020 	.word	0x20000020

080005b0 <Get_CRLH_Position>:
#include "std_types.h"

#include "GPIO_Config.h"
#include "GPIO.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	2b80      	cmp	r3, #128	; 0x80
 80005be:	d042      	beq.n	8000646 <Get_CRLH_Position+0x96>
 80005c0:	2b80      	cmp	r3, #128	; 0x80
 80005c2:	dc11      	bgt.n	80005e8 <Get_CRLH_Position+0x38>
 80005c4:	2b08      	cmp	r3, #8
 80005c6:	d036      	beq.n	8000636 <Get_CRLH_Position+0x86>
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	dc06      	bgt.n	80005da <Get_CRLH_Position+0x2a>
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d02e      	beq.n	800062e <Get_CRLH_Position+0x7e>
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d02e      	beq.n	8000632 <Get_CRLH_Position+0x82>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d028      	beq.n	800062a <Get_CRLH_Position+0x7a>
 80005d8:	e047      	b.n	800066a <Get_CRLH_Position+0xba>
 80005da:	2b20      	cmp	r3, #32
 80005dc:	d02f      	beq.n	800063e <Get_CRLH_Position+0x8e>
 80005de:	2b40      	cmp	r3, #64	; 0x40
 80005e0:	d02f      	beq.n	8000642 <Get_CRLH_Position+0x92>
 80005e2:	2b10      	cmp	r3, #16
 80005e4:	d029      	beq.n	800063a <Get_CRLH_Position+0x8a>
 80005e6:	e040      	b.n	800066a <Get_CRLH_Position+0xba>
 80005e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ec:	d033      	beq.n	8000656 <Get_CRLH_Position+0xa6>
 80005ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005f2:	dc09      	bgt.n	8000608 <Get_CRLH_Position+0x58>
 80005f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f8:	d029      	beq.n	800064e <Get_CRLH_Position+0x9e>
 80005fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005fe:	d028      	beq.n	8000652 <Get_CRLH_Position+0xa2>
 8000600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000604:	d021      	beq.n	800064a <Get_CRLH_Position+0x9a>
 8000606:	e030      	b.n	800066a <Get_CRLH_Position+0xba>
 8000608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800060c:	d027      	beq.n	800065e <Get_CRLH_Position+0xae>
 800060e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000612:	dc03      	bgt.n	800061c <Get_CRLH_Position+0x6c>
 8000614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000618:	d01f      	beq.n	800065a <Get_CRLH_Position+0xaa>
 800061a:	e026      	b.n	800066a <Get_CRLH_Position+0xba>
 800061c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000620:	d01f      	beq.n	8000662 <Get_CRLH_Position+0xb2>
 8000622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000626:	d01e      	beq.n	8000666 <Get_CRLH_Position+0xb6>
 8000628:	e01f      	b.n	800066a <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e01e      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800062e:	2304      	movs	r3, #4
 8000630:	e01c      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000632:	2308      	movs	r3, #8
 8000634:	e01a      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000636:	230c      	movs	r3, #12
 8000638:	e018      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800063a:	2310      	movs	r3, #16
 800063c:	e016      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800063e:	2314      	movs	r3, #20
 8000640:	e014      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000642:	2318      	movs	r3, #24
 8000644:	e012      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000646:	231c      	movs	r3, #28
 8000648:	e010      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e00e      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800064e:	2304      	movs	r3, #4
 8000650:	e00c      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000652:	2308      	movs	r3, #8
 8000654:	e00a      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000656:	230c      	movs	r3, #12
 8000658:	e008      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800065a:	2310      	movs	r3, #16
 800065c:	e006      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800065e:	2314      	movs	r3, #20
 8000660:	e004      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000662:	2318      	movs	r3, #24
 8000664:	e002      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000666:	231c      	movs	r3, #28
 8000668:	e000      	b.n	800066c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <GPIO_init>:
 * @param [in] 		-PinConfig: Contains specified parameters for GPIO Pin
 * @retval 			-NONE
 * Note				-GPIOA & GPIOB Fully included
 * 					 GPIOC Partially included
 */
void GPIO_init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000676:	b590      	push	{r4, r7, lr}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configRegister = NULL;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2bff      	cmp	r3, #255	; 0xff
 800068e:	d801      	bhi.n	8000694 <GPIO_init+0x1e>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	e001      	b.n	8000698 <GPIO_init+0x22>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3304      	adds	r3, #4
 8000698:	60bb      	str	r3, [r7, #8]

	//Clear CNF & MODE
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff86 	bl	80005b0 <Get_CRLH_Position>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	230f      	movs	r3, #15
 80006aa:	4093      	lsls	r3, r2
 80006ac:	43da      	mvns	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	401a      	ands	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	601a      	str	r2, [r3, #0]

	//If PIN is OUTPUT
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d00b      	beq.n	80006d8 <GPIO_init+0x62>
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	d007      	beq.n	80006d8 <GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	885b      	ldrh	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d003      	beq.n	80006d8 <GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	885b      	ldrh	r3, [r3, #2]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d10e      	bne.n	80006f6 <GPIO_init+0x80>
	{
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	885b      	ldrh	r3, [r3, #2]
 80006dc:	3b04      	subs	r3, #4
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e02d      	b.n	8000752 <GPIO_init+0xdc>
	}
	else //PIN is INPUT
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	885b      	ldrh	r3, [r3, #2]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d003      	beq.n	8000706 <GPIO_init+0x90>
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	885b      	ldrh	r3, [r3, #2]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d108      	bne.n	8000718 <GPIO_init+0xa2>
			PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | 0x0) & 0x0F);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	885b      	ldrh	r3, [r3, #2]
 800070a:	3b04      	subs	r3, #4
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e01c      	b.n	8000752 <GPIO_init+0xdc>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	885b      	ldrh	r3, [r3, #2]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d102      	bne.n	8000726 <GPIO_init+0xb0>
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLOAT) << 2) | 0x0) & 0x0F);
 8000720:	2304      	movs	r3, #4
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e015      	b.n	8000752 <GPIO_init+0xdc>
		}
		else{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 8000726:	2308      	movs	r3, #8
 8000728:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	885b      	ldrh	r3, [r3, #2]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d107      	bne.n	8000742 <GPIO_init+0xcc>
				//Input Pull-Up >> GPIOx->ODR = 1, Table 20: Port bit configuration table.
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	8812      	ldrh	r2, [r2, #0]
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	e007      	b.n	8000752 <GPIO_init+0xdc>
			}
			else{
				//Input Pull-Down >> GPIOx->ODR = 0, Table 20: Port bit configuration table.
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	43d2      	mvns	r2, r2
 800074c:	401a      	ands	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= (PIN_CONFIG  << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000752:	7bfc      	ldrb	r4, [r7, #15]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff29 	bl	80005b0 <Get_CRLH_Position>
 800075e:	4603      	mov	r3, r0
 8000760:	fa04 f203 	lsl.w	r2, r4, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	431a      	orrs	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}

08000776 <GPIO_TogglePin>:
 * @param [in]	 	-GPIOx: where x = (A,B,C)
 * @param [in]	 	-PinNumber: Set PinNumber based on @ref GPIO_PIN_def
 * @retval 			-NONE
 * Note				-NONE
 */
void GPIO_TogglePin(GPIO_t *GPIOx, uint16_t PinNumber){
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	405a      	eors	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60da      	str	r2, [r3, #12]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <NVIC_EnableInterrupt>:
void NVIC_init(){
	/* Set Number of Group and Sub Group */
	SCB_AIRCR = SCB_AIRCR_GROUPING;
}

void NVIC_EnableInterrupt(uint8_t interruptNumber){
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]

	/* If the user wants to enable interrupt in ISER0 register */
	if(interruptNumber <= NVIC_INTERRUPT_INDEX_31)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	d805      	bhi.n	80007b4 <NVIC_EnableInterrupt+0x1c>
	{
		/* Enable Interrupt */
		NVIC_ISER0 = (1 << interruptNumber);
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2201      	movs	r2, #1
 80007ac:	409a      	lsls	r2, r3
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <NVIC_EnableInterrupt+0x3c>)
 80007b0:	601a      	str	r2, [r3, #0]
		interruptNumber -= 32;

		/* Enable Interrupt */
		NVIC_ISER1 = (1 << interruptNumber);
	}
}
 80007b2:	e00a      	b.n	80007ca <NVIC_EnableInterrupt+0x32>
	else if(interruptNumber <= NVIC_INTERRUPT_INDEX_59)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b3b      	cmp	r3, #59	; 0x3b
 80007b8:	d807      	bhi.n	80007ca <NVIC_EnableInterrupt+0x32>
		interruptNumber -= 32;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3b20      	subs	r3, #32
 80007be:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << interruptNumber);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2201      	movs	r2, #1
 80007c4:	409a      	lsls	r2, r3
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <NVIC_EnableInterrupt+0x40>)
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000e104 	.word	0xe000e104

080007dc <NVIC_DisableInterrupt>:

void NVIC_DisableInterrupt(uint8_t interruptNumber){
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]

	/* If the user wants to disable interrupt in ISER0 register */
	if(interruptNumber <= NVIC_INTERRUPT_INDEX_31)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	d805      	bhi.n	80007f8 <NVIC_DisableInterrupt+0x1c>
	{
		/* Disable Interrupt */
		NVIC_ICER0 = (1 << interruptNumber);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2201      	movs	r2, #1
 80007f0:	409a      	lsls	r2, r3
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <NVIC_DisableInterrupt+0x3c>)
 80007f4:	601a      	str	r2, [r3, #0]
		interruptNumber -= 32;

		/* Disable Interrupt */
		NVIC_ICER1 = (1 << interruptNumber);
	}
}
 80007f6:	e00a      	b.n	800080e <NVIC_DisableInterrupt+0x32>
	else if(interruptNumber <= NVIC_INTERRUPT_INDEX_59)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b3b      	cmp	r3, #59	; 0x3b
 80007fc:	d807      	bhi.n	800080e <NVIC_DisableInterrupt+0x32>
		interruptNumber -= 32;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3b20      	subs	r3, #32
 8000802:	71fb      	strb	r3, [r7, #7]
		NVIC_ICER1 = (1 << interruptNumber);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2201      	movs	r2, #1
 8000808:	409a      	lsls	r2, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <NVIC_DisableInterrupt+0x40>)
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e180 	.word	0xe000e180
 800081c:	e000e184 	.word	0xe000e184

08000820 <RCC_init>:

#include "RCC_Config.h"
#include "RCC.h"
#include "RCC_Private.h"

void RCC_init(void){
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

	//--------------------------------
	// Clock Control Register (RCC_CR)
	//--------------------------------
	RCC->CR |= (PLL_ON | CSS_ON | HSE_BYP | HSI_ON);
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <RCC_init+0x20>)
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <RCC_init+0x20>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6013      	str	r3, [r2, #0]

	//--------------------------------
	// Clock Configuration Register (RCC_CFGR)
	//--------------------------------
	RCC->CFGR |= (MCO | USB_PRE | PPRE2 | PPRE1 | HPRE | SW);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <RCC_init+0x20>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <RCC_init+0x20>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6053      	str	r3, [r2, #4]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <RCC_enableClock>:

void RCC_enableClock(uint8_t BusID, uint16_t peripheralID){
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	80bb      	strh	r3, [r7, #4]

	switch(BusID){
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00f      	beq.n	800087a <RCC_enableClock+0x36>
 800085a:	2b02      	cmp	r3, #2
 800085c:	d018      	beq.n	8000890 <RCC_enableClock+0x4c>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d000      	beq.n	8000864 <RCC_enableClock+0x20>
		break;
	case RCC_APB1:
		RCC->APB1ENR |= (1 << peripheralID);
		break;
	}
}
 8000862:	e020      	b.n	80008a6 <RCC_enableClock+0x62>
		RCC->AHBENR |= (1 << peripheralID);
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <RCC_enableClock+0x6c>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	88ba      	ldrh	r2, [r7, #4]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <RCC_enableClock+0x6c>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6153      	str	r3, [r2, #20]
		break;
 8000878:	e015      	b.n	80008a6 <RCC_enableClock+0x62>
		RCC->APB2ENR |= (1 << peripheralID);
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <RCC_enableClock+0x6c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	88ba      	ldrh	r2, [r7, #4]
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <RCC_enableClock+0x6c>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6193      	str	r3, [r2, #24]
		break;
 800088e:	e00a      	b.n	80008a6 <RCC_enableClock+0x62>
		RCC->APB1ENR |= (1 << peripheralID);
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <RCC_enableClock+0x6c>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	88ba      	ldrh	r2, [r7, #4]
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <RCC_enableClock+0x6c>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	61d3      	str	r3, [r2, #28]
		break;
 80008a4:	bf00      	nop
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	40021000 	.word	0x40021000

080008b4 <EXTI0_CallBack>:

uint32_t IRQ_Flag = 0;
EXTI_PinConfig_t EXTI_Config;
GPIO_PinConfig_t PinConfig;

void EXTI0_CallBack(){
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <EXTI0_CallBack+0x14>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2000001c 	.word	0x2000001c

080008cc <clock_init>:

void clock_init(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	RCC_init();
 80008d0:	f7ff ffa6 	bl	8000820 <RCC_init>
	RCC_enableClock(RCC_APB2, RCC_APB2ENR_IOPAEN);
 80008d4:	2102      	movs	r1, #2
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffb4 	bl	8000844 <RCC_enableClock>
	RCC_enableClock(RCC_APB2, RCC_APB2ENR_IOPBEN);
 80008dc:	2103      	movs	r1, #3
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ffb0 	bl	8000844 <RCC_enableClock>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <LED_init>:

void LED_init(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <LED_init+0x24>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <LED_init+0x24>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	805a      	strh	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_2M;
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <LED_init+0x24>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	809a      	strh	r2, [r3, #4]

	GPIO_init(GPIOA, &PinConfig);
 80008fe:	4903      	ldr	r1, [pc, #12]	; (800090c <LED_init+0x24>)
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <LED_init+0x28>)
 8000902:	f7ff feb8 	bl	8000676 <GPIO_init>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000060 	.word	0x20000060
 8000910:	40010800 	.word	0x40010800

08000914 <Interrupt_init>:

void Interrupt_init(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

	EXTI_Config.EXTI_PIN = EXTI0PB0;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <Interrupt_init+0x2c>)
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <Interrupt_init+0x30>)
 800091c:	ca07      	ldmia	r2, {r0, r1, r2}
 800091e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.Trigger = EXTI_Trigger_RisingAndFalling;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <Interrupt_init+0x2c>)
 8000924:	2202      	movs	r2, #2
 8000926:	731a      	strb	r2, [r3, #12]
	EXTI_Config.IRQ_EN = EXTI_IRQ_Enable;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <Interrupt_init+0x2c>)
 800092a:	2200      	movs	r2, #0
 800092c:	735a      	strb	r2, [r3, #13]
	EXTI_Config.P_IRQ_CallBack = EXTI0_CallBack;
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <Interrupt_init+0x2c>)
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <Interrupt_init+0x34>)
 8000932:	611a      	str	r2, [r3, #16]

	MCAL_EXTI_init(&EXTI_Config);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <Interrupt_init+0x2c>)
 8000936:	f7ff fd1f 	bl	8000378 <MCAL_EXTI_init>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000068 	.word	0x20000068
 8000944:	08000a30 	.word	0x08000a30
 8000948:	080008b5 	.word	0x080008b5

0800094c <main>:



int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	clock_init();
 8000950:	f7ff ffbc 	bl	80008cc <clock_init>
	LED_init();
 8000954:	f7ff ffc8 	bl	80008e8 <LED_init>
	Interrupt_init();
 8000958:	f7ff ffdc 	bl	8000914 <Interrupt_init>

	//IRQ_Flag = 1;

	while(1){
		if(IRQ_Flag){
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <main+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0fb      	beq.n	800095c <main+0x10>
			GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000964:	2104      	movs	r1, #4
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <main+0x2c>)
 8000968:	f7ff ff05 	bl	8000776 <GPIO_TogglePin>
			//delay_ms(1000);
			IRQ_Flag = 0;
 800096c:	4b01      	ldr	r3, [pc, #4]	; (8000974 <main+0x28>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag){
 8000972:	e7f3      	b.n	800095c <main+0x10>
 8000974:	2000001c 	.word	0x2000001c
 8000978:	40010800 	.word	0x40010800

0800097c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000980:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009aa:	f000 f811 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff ffcd 	bl	800094c <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   r0, =_estack
 80009b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009c0:	08000a44 	.word	0x08000a44
  ldr r2, =_sbss
 80009c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009c8:	2000007c 	.word	0x2000007c

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	2500      	movs	r5, #0
 80009d4:	4e0c      	ldr	r6, [pc, #48]	; (8000a08 <__libc_init_array+0x38>)
 80009d6:	4c0d      	ldr	r4, [pc, #52]	; (8000a0c <__libc_init_array+0x3c>)
 80009d8:	1ba4      	subs	r4, r4, r6
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	42a5      	cmp	r5, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	f000 f81a 	bl	8000a18 <_init>
 80009e4:	2500      	movs	r5, #0
 80009e6:	4e0a      	ldr	r6, [pc, #40]	; (8000a10 <__libc_init_array+0x40>)
 80009e8:	4c0a      	ldr	r4, [pc, #40]	; (8000a14 <__libc_init_array+0x44>)
 80009ea:	1ba4      	subs	r4, r4, r6
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	42a5      	cmp	r5, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009f8:	4798      	blx	r3
 80009fa:	3501      	adds	r5, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a02:	4798      	blx	r3
 8000a04:	3501      	adds	r5, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000a3c 	.word	0x08000a3c
 8000a0c:	08000a3c 	.word	0x08000a3c
 8000a10:	08000a3c 	.word	0x08000a3c
 8000a14:	08000a40 	.word	0x08000a40

08000a18 <_init>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr

08000a24 <_fini>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr
