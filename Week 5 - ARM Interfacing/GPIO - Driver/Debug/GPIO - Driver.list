
GPIO - Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000510  08000518  00010518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000510  08000510  00010518  2**0
                  CONTENTS
  4 .ARM          00000000  08000510  08000510  00010518  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000510  08000518  00010518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000518  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000518  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000667  00000000  00000000  00010541  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000299  00000000  00000000  00010ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e0  00000000  00000000  00010e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000011da  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000004b5  00000000  00000000  000121aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000477e  00000000  00000000  0001265f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016ddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000026c  00000000  00000000  00016e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004f8 	.word	0x080004f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004f8 	.word	0x080004f8

08000170 <Get_CRLH_Position>:
#include "std_types.h"

#include "GPIO_Config.h"
#include "GPIO.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <GPIO_init>:
 * @param [in] 		-PinConfig: Contains specified parameters for GPIO Pin
 * @retval 			-NONE
 * Note				-GPIOA & GPIOB Fully included
 * 					 GPIOC Partially included
 */
void GPIO_init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig){
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configRegister = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	d801      	bhi.n	8000254 <GPIO_init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	e001      	b.n	8000258 <GPIO_init+0x22>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3304      	adds	r3, #4
 8000258:	60bb      	str	r3, [r7, #8]

	//Clear CNF & MODE
	(*configRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_CRLH_Position>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	230f      	movs	r3, #15
 800026a:	4093      	lsls	r3, r2
 800026c:	43da      	mvns	r2, r3
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	401a      	ands	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]

	//If PIN is OUTPUT
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	885b      	ldrh	r3, [r3, #2]
 800027c:	2b04      	cmp	r3, #4
 800027e:	d00b      	beq.n	8000298 <GPIO_init+0x62>
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	885b      	ldrh	r3, [r3, #2]
 8000284:	2b05      	cmp	r3, #5
 8000286:	d007      	beq.n	8000298 <GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	885b      	ldrh	r3, [r3, #2]
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) ||
 800028c:	2b06      	cmp	r3, #6
 800028e:	d003      	beq.n	8000298 <GPIO_init+0x62>
			(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD))
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	2b07      	cmp	r3, #7
 8000296:	d10e      	bne.n	80002b6 <GPIO_init+0x80>
	{
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	885b      	ldrh	r3, [r3, #2]
 800029c:	3b04      	subs	r3, #4
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	b25a      	sxtb	r2, r3
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	889b      	ldrh	r3, [r3, #4]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	4313      	orrs	r3, r2
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e02d      	b.n	8000312 <GPIO_init+0xdc>
	}
	else //PIN is INPUT
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)){
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	885b      	ldrh	r3, [r3, #2]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d003      	beq.n	80002c6 <GPIO_init+0x90>
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	885b      	ldrh	r3, [r3, #2]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d108      	bne.n	80002d8 <GPIO_init+0xa2>
			PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2) | 0x0) & 0x0F);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	885b      	ldrh	r3, [r3, #2]
 80002ca:	3b04      	subs	r3, #4
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	f003 030f 	and.w	r3, r3, #15
 80002d4:	73fb      	strb	r3, [r7, #15]
 80002d6:	e01c      	b.n	8000312 <GPIO_init+0xdc>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	885b      	ldrh	r3, [r3, #2]
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d102      	bne.n	80002e6 <GPIO_init+0xb0>
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLOAT) << 2) | 0x0) & 0x0F);
 80002e0:	2304      	movs	r3, #4
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	e015      	b.n	8000312 <GPIO_init+0xdc>
		}
		else{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0F);
 80002e6:	2308      	movs	r3, #8
 80002e8:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	885b      	ldrh	r3, [r3, #2]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d107      	bne.n	8000302 <GPIO_init+0xcc>
				//Input Pull-Up >> GPIOx->ODR = 1, Table 20: Port bit configuration table.
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	683a      	ldr	r2, [r7, #0]
 80002f8:	8812      	ldrh	r2, [r2, #0]
 80002fa:	431a      	orrs	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	e007      	b.n	8000312 <GPIO_init+0xdc>
			}
			else{
				//Input Pull-Down >> GPIOx->ODR = 0, Table 20: Port bit configuration table.
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	8812      	ldrh	r2, [r2, #0]
 800030a:	43d2      	mvns	r2, r2
 800030c:	401a      	ands	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configRegister) |= (PIN_CONFIG  << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000312:	7bfc      	ldrb	r4, [r7, #15]
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff29 	bl	8000170 <Get_CRLH_Position>
 800031e:	4603      	mov	r3, r0
 8000320:	fa04 f203 	lsl.w	r2, r4, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	431a      	orrs	r2, r3
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}

08000336 <GPIO_TogglePin>:
 * @param [in]	 	-GPIOx: where x = (A,B,C)
 * @param [in]	 	-PinNumber: Set PinNumber based on @ref GPIO_PIN_def
 * @retval 			-NONE
 * Note				-NONE
 */
void GPIO_TogglePin(GPIO_t *GPIOx, uint16_t PinNumber){
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
 800033e:	460b      	mov	r3, r1
 8000340:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	68da      	ldr	r2, [r3, #12]
 8000346:	887b      	ldrh	r3, [r7, #2]
 8000348:	405a      	eors	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60da      	str	r2, [r3, #12]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <RCC_init>:

#include "RCC_Config.h"
#include "RCC.h"
#include "RCC_Private.h"

void RCC_init(void){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

	//--------------------------------
	// Clock Control Register (RCC_CR)
	//--------------------------------
	RCC->CR |= (PLL_ON | CSS_ON | HSE_BYP | HSI_ON);
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <RCC_init+0x20>)
 800035e:	4a06      	ldr	r2, [pc, #24]	; (8000378 <RCC_init+0x20>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	6013      	str	r3, [r2, #0]

	//--------------------------------
	// Clock Configuration Register (RCC_CFGR)
	//--------------------------------
	RCC->CFGR |= (MCO | USB_PRE | PPRE2 | PPRE1 | HPRE | SW);
 8000364:	4b04      	ldr	r3, [pc, #16]	; (8000378 <RCC_init+0x20>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a03      	ldr	r2, [pc, #12]	; (8000378 <RCC_init+0x20>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	6053      	str	r3, [r2, #4]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <RCC_enableClock>:

void RCC_enableClock(uint8_t BusID, uint16_t peripheralID){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	460a      	mov	r2, r1
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	4613      	mov	r3, r2
 800038a:	80bb      	strh	r3, [r7, #4]

	switch(BusID){
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d00f      	beq.n	80003b2 <RCC_enableClock+0x36>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d018      	beq.n	80003c8 <RCC_enableClock+0x4c>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d000      	beq.n	800039c <RCC_enableClock+0x20>
		break;
	case RCC_APB1:
		RCC->APB1ENR |= (1 << peripheralID);
		break;
	}
}
 800039a:	e020      	b.n	80003de <RCC_enableClock+0x62>
		RCC->AHBENR |= (1 << peripheralID);
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <RCC_enableClock+0x6c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	88ba      	ldrh	r2, [r7, #4]
 80003a2:	2101      	movs	r1, #1
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <RCC_enableClock+0x6c>)
 80003ac:	430b      	orrs	r3, r1
 80003ae:	6153      	str	r3, [r2, #20]
		break;
 80003b0:	e015      	b.n	80003de <RCC_enableClock+0x62>
		RCC->APB2ENR |= (1 << peripheralID);
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <RCC_enableClock+0x6c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	88ba      	ldrh	r2, [r7, #4]
 80003b8:	2101      	movs	r1, #1
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	4611      	mov	r1, r2
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <RCC_enableClock+0x6c>)
 80003c2:	430b      	orrs	r3, r1
 80003c4:	6193      	str	r3, [r2, #24]
		break;
 80003c6:	e00a      	b.n	80003de <RCC_enableClock+0x62>
		RCC->APB1ENR |= (1 << peripheralID);
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <RCC_enableClock+0x6c>)
 80003ca:	69db      	ldr	r3, [r3, #28]
 80003cc:	88ba      	ldrh	r2, [r7, #4]
 80003ce:	2101      	movs	r1, #1
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <RCC_enableClock+0x6c>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	61d3      	str	r3, [r2, #28]
		break;
 80003dc:	bf00      	nop
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000

080003ec <clock_init>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void clock_init(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	RCC_init();
 80003f0:	f7ff ffb2 	bl	8000358 <RCC_init>
	RCC_enableClock(RCC_APB2, RCC_APB2ENR_IOPAEN);
 80003f4:	2102      	movs	r1, #2
 80003f6:	2001      	movs	r0, #1
 80003f8:	f7ff ffc0 	bl	800037c <RCC_enableClock>
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}

08000400 <LED_init>:

void LED_init(){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinConfig;

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000406:	2304      	movs	r3, #4
 8000408:	803b      	strh	r3, [r7, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800040a:	2304      	movs	r3, #4
 800040c:	807b      	strh	r3, [r7, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_2M;
 800040e:	2302      	movs	r3, #2
 8000410:	80bb      	strh	r3, [r7, #4]
	GPIO_init(GPIOA, &PinConfig);
 8000412:	463b      	mov	r3, r7
 8000414:	4619      	mov	r1, r3
 8000416:	4803      	ldr	r0, [pc, #12]	; (8000424 <LED_init+0x24>)
 8000418:	f7ff ff0d 	bl	8000236 <GPIO_init>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40010800 	.word	0x40010800

08000428 <main>:

int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	clock_init();
 800042e:	f7ff ffdd 	bl	80003ec <clock_init>
	LED_init();
 8000432:	f7ff ffe5 	bl	8000400 <LED_init>

	while(1){
		GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000436:	2104      	movs	r1, #4
 8000438:	4806      	ldr	r0, [pc, #24]	; (8000454 <main+0x2c>)
 800043a:	f7ff ff7c 	bl	8000336 <GPIO_TogglePin>
		delay_ms(1000);
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <main+0x30>)
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	e000      	b.n	8000446 <main+0x1e>
 8000444:	bf00      	nop
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	1e5a      	subs	r2, r3, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f9      	bne.n	8000444 <main+0x1c>
		GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000450:	e7f1      	b.n	8000436 <main+0xe>
 8000452:	bf00      	nop
 8000454:	40010800 	.word	0x40010800
 8000458:	0007a120 	.word	0x0007a120

0800045c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000460:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <LoopForever+0x6>)
  ldr r1, =_edata
 8000466:	490d      	ldr	r1, [pc, #52]	; (800049c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <LoopForever+0xe>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800047c:	4c0a      	ldr	r4, [pc, #40]	; (80004a8 <LoopForever+0x16>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048a:	f000 f811 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff ffcb 	bl	8000428 <main>

08000492 <LoopForever>:

LoopForever:
  b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>
  ldr   r0, =_estack
 8000494:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a0:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 80004a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a8:	2000001c 	.word	0x2000001c

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>
	...

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	2500      	movs	r5, #0
 80004b4:	4e0c      	ldr	r6, [pc, #48]	; (80004e8 <__libc_init_array+0x38>)
 80004b6:	4c0d      	ldr	r4, [pc, #52]	; (80004ec <__libc_init_array+0x3c>)
 80004b8:	1ba4      	subs	r4, r4, r6
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	42a5      	cmp	r5, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	f000 f81a 	bl	80004f8 <_init>
 80004c4:	2500      	movs	r5, #0
 80004c6:	4e0a      	ldr	r6, [pc, #40]	; (80004f0 <__libc_init_array+0x40>)
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <__libc_init_array+0x44>)
 80004ca:	1ba4      	subs	r4, r4, r6
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	42a5      	cmp	r5, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d8:	4798      	blx	r3
 80004da:	3501      	adds	r5, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004e2:	4798      	blx	r3
 80004e4:	3501      	adds	r5, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000510 	.word	0x08000510
 80004ec:	08000510 	.word	0x08000510
 80004f0:	08000510 	.word	0x08000510
 80004f4:	08000514 	.word	0x08000514

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
